// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "ics213_dialog.h"
#include "status.h"

static void cb_mnuNew(Fl_Menu_*, void*) {
  cb_new();
}

static void cb_mnuOpen(Fl_Menu_*, void*) {
  cb_open();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  cb_save();
}

static void cb_mnuSaveAs(Fl_Menu_*, void*) {
  cb_save_as();
}

static void cb_mnuWrite(Fl_Menu_*, void*) {
  cb_write();
}

static void cb_mnu_qimport(Fl_Menu_*, void*) {
  cb_import();
}

static void cb_mnu_qexport(Fl_Menu_*, void*) {
  cb_export();
}

static void cb_mnuWrapImport(Fl_Menu_*, void*) {
  cb_wrap_import();
}

static void cb_mnuWrapExport(Fl_Menu_*, void*) {
  cb_wrap_export();
}

static void cb_mnuAutoSend(Fl_Menu_*, void*) {
  cb_wrap_autosend();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cb_exit();
}

static void cb_mnu_load_template(Fl_Menu_*, void*) {
  cb_load_template();
}

static void cb_mnu_save_template(Fl_Menu_*, void*) {
  cb_save_template();
}

static void cb_mnu_save_as_template(Fl_Menu_*, void*) {
  cb_save_as_template();
}

static void cb_mnuCompress(Fl_Menu_*, void*) {
  progStatus.compression = mnuCompress->value();
}

static void cb_mnuUTC(Fl_Menu_*, void*) {
  progStatus.UTC = mnuUTC->value();
}

static void cb_mnu_dtformat0(Fl_Menu_* o, void*) {
  if (o->value()) progStatus.dtformat = 0;
}

static void cb_mnu_dtformat1(Fl_Menu_* o, void*) {
  if (o->value()) progStatus.dtformat = 1;
}

static void cb_mnu_dtformat2(Fl_Menu_* o, void*) {
  if (o->value()) progStatus.dtformat = 2;
}

static void cb_mnuOptions(Fl_Menu_*, void*) {
  showoptions();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  cb_About();
}

Fl_Menu_Item menu_[] = {
 {_("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&New"), 0x4006e,  (Fl_Callback*)cb_mnuNew, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Open"), 0x4006f,  (Fl_Callback*)cb_mnuOpen, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Save"), 0x40073,  (Fl_Callback*)cb_mnuSave, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save &As"), 0x40061,  (Fl_Callback*)cb_mnuSaveAs, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Write"), 0x40077,  (Fl_Callback*)cb_mnuWrite, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Q-forms"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnu_qimport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnu_qexport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Wrap"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnuWrapImport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnuWrapExport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("AutoSend"), 0,  (Fl_Callback*)cb_mnuAutoSend, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("E&xit"), 0x40078,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Template"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Load"), 0,  (Fl_Callback*)cb_mnu_load_template, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save"), 0,  (Fl_Callback*)cb_mnu_save_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save As"), 0,  (Fl_Callback*)cb_mnu_save_as_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Config"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Use compression"), 0,  (Fl_Callback*)cb_mnuCompress, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Date"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("use UTC"), 0,  (Fl_Callback*)cb_mnuUTC, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("YYYY-DD-MM"), 0,  (Fl_Callback*)cb_mnu_dtformat0, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {_("MM/DD/YY"), 0,  (Fl_Callback*)cb_mnu_dtformat1, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {_("DD/MM/YY"), 0,  (Fl_Callback*)cb_mnu_dtformat2, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {_("          "), 0,  0, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Options"), 0,  (Fl_Callback*)cb_mnuOptions, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Input2 *txt_To=(Fl_Input2 *)0;

Fl_Input2 *txt_P1=(Fl_Input2 *)0;

Fl_Input2 *txt_Fm=(Fl_Input2 *)0;

Fl_Input2 *txt_P2=(Fl_Input2 *)0;

Fl_Input2 *txt_Subj=(Fl_Input2 *)0;

Fl_DateInput *txt_D1=(Fl_DateInput *)0;

Fl_Button *btnDate1=(Fl_Button *)0;

static void cb_btnDate1(Fl_Button*, void*) {
  cb_SetDate1();
}

Fl_Input2 *txt_T1=(Fl_Input2 *)0;

Fl_Button *btnTime1=(Fl_Button *)0;

static void cb_btnTime1(Fl_Button*, void*) {
  cb_SetTime1();
}

FTextEdit *txt_Msg=(FTextEdit *)0;

Fl_Input2 *txt_S1=(Fl_Input2 *)0;

Fl_Input2 *txt_P3=(Fl_Input2 *)0;

Fl_Input2 *txt_S2=(Fl_Input2 *)0;

Fl_DateInput *txt_D2=(Fl_DateInput *)0;

Fl_Input2 *txt_T2=(Fl_Input2 *)0;

Fl_Button *btnTime2=(Fl_Button *)0;

static void cb_btnTime2(Fl_Button*, void*) {
  cb_SetTime2();
}

FTextEdit *txt_Reply=(FTextEdit *)0;

Fl_Input2 *txt_P4=(Fl_Input2 *)0;

Fl_Button *btnDate2=(Fl_Button *)0;

static void cb_btnDate2(Fl_Button*, void*) {
  cb_SetDate2();
}

Fl_Output *txt_filename=(Fl_Output *)0;

Fl_Double_Window* ics_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(558, 395, _("ICS213 Message Generator"));
    w = o;
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(1, 0, 555, 20);
      { Fl_Menu_Item* o = &menu_[23];
        progStatus.compression ? o->set() :o->clear();
      }
      { Fl_Menu_Item* o = &menu_[25];
        progStatus.UTC ? o->set() :o->clear();
      }
      { Fl_Menu_Item* o = &menu_[26];
        progStatus.dtformat==0 ? o->set() :o->clear();
      }
      { Fl_Menu_Item* o = &menu_[27];
        progStatus.dtformat==1 ? o->set() :o->clear();
      }
      { Fl_Menu_Item* o = &menu_[28];
        progStatus.dtformat==2 ? o->set() :o->clear();
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Tabs* o = new Fl_Tabs(1, 22, 555, 370);
      { Fl_Group* o = new Fl_Group(2, 45, 551, 346, _("Originator"));
        { txt_To = new Fl_Input2(41, 50, 235, 24, _("To"));
          txt_To->tooltip(_("Addressee"));
          txt_To->box(FL_DOWN_BOX);
          txt_To->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_To->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_To->labeltype(FL_NORMAL_LABEL);
          txt_To->labelfont(0);
          txt_To->labelsize(14);
          txt_To->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_To->align(FL_ALIGN_LEFT);
          txt_To->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_To
        { txt_P1 = new Fl_Input2(313, 50, 235, 24, _("Pos."));
          txt_P1->tooltip(_("Position of addressee"));
          txt_P1->box(FL_DOWN_BOX);
          txt_P1->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_P1->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_P1->labeltype(FL_NORMAL_LABEL);
          txt_P1->labelfont(0);
          txt_P1->labelsize(14);
          txt_P1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_P1->align(FL_ALIGN_LEFT);
          txt_P1->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_P1
        { txt_Fm = new Fl_Input2(41, 75, 235, 24, _("Fm"));
          txt_Fm->tooltip(_("Originator"));
          txt_Fm->box(FL_DOWN_BOX);
          txt_Fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_Fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_Fm->labeltype(FL_NORMAL_LABEL);
          txt_Fm->labelfont(0);
          txt_Fm->labelsize(14);
          txt_Fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_Fm->align(FL_ALIGN_LEFT);
          txt_Fm->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_Fm
        { txt_P2 = new Fl_Input2(313, 75, 235, 24, _("Pos."));
          txt_P2->tooltip(_("Position of originator"));
          txt_P2->box(FL_DOWN_BOX);
          txt_P2->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_P2->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_P2->labeltype(FL_NORMAL_LABEL);
          txt_P2->labelfont(0);
          txt_P2->labelsize(14);
          txt_P2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_P2->align(FL_ALIGN_LEFT);
          txt_P2->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_P2
        { txt_Subj = new Fl_Input2(41, 100, 235, 24, _("Sub."));
          txt_Subj->tooltip(_("Subject"));
          txt_Subj->box(FL_DOWN_BOX);
          txt_Subj->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_Subj->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_Subj->labeltype(FL_NORMAL_LABEL);
          txt_Subj->labelfont(0);
          txt_Subj->labelsize(14);
          txt_Subj->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_Subj->align(FL_ALIGN_LEFT);
          txt_Subj->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_Subj
        { txt_D1 = new Fl_DateInput(314, 101, 122, 24, _("Date"));
          txt_D1->tooltip(_("Date of origination"));
          txt_D1->box(FL_DOWN_BOX);
          txt_D1->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_D1->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_D1->labeltype(FL_NORMAL_LABEL);
          txt_D1->labelfont(0);
          txt_D1->labelsize(14);
          txt_D1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_D1->align(FL_ALIGN_LEFT);
          txt_D1->when(FL_WHEN_RELEASE);
          txt_D1->format(2);
        } // Fl_DateInput* txt_D1
        { btnDate1 = new Fl_Button(438, 103, 20, 20, _("..."));
          btnDate1->tooltip(_("Set today"));
          btnDate1->callback((Fl_Callback*)cb_btnDate1);
        } // Fl_Button* btnDate1
        { txt_T1 = new Fl_Input2(315, 126, 100, 24, _("Time"));
          txt_T1->tooltip(_("Time of origination"));
          txt_T1->box(FL_DOWN_BOX);
          txt_T1->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_T1->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_T1->labeltype(FL_NORMAL_LABEL);
          txt_T1->labelfont(0);
          txt_T1->labelsize(14);
          txt_T1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_T1->align(FL_ALIGN_LEFT);
          txt_T1->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_T1
        { btnTime1 = new Fl_Button(417, 128, 20, 20, _("..."));
          btnTime1->tooltip(_("Set time now"));
          btnTime1->callback((Fl_Callback*)cb_btnTime1);
        } // Fl_Button* btnTime1
        { txt_Msg = new FTextEdit(6, 153, 544, 206, _("Message:"));
          txt_Msg->box(FL_DOWN_FRAME);
          txt_Msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_Msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_Msg->labeltype(FL_NORMAL_LABEL);
          txt_Msg->labelfont(0);
          txt_Msg->labelsize(14);
          txt_Msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_Msg->align(FL_ALIGN_TOP_LEFT);
          txt_Msg->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(txt_Msg);
        } // FTextEdit* txt_Msg
        { txt_S1 = new Fl_Input2(36, 362, 240, 24, _("Sig."));
          txt_S1->tooltip(_("Signature of preparer"));
          txt_S1->box(FL_DOWN_BOX);
          txt_S1->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_S1->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_S1->labeltype(FL_NORMAL_LABEL);
          txt_S1->labelfont(0);
          txt_S1->labelsize(14);
          txt_S1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_S1->align(FL_ALIGN_LEFT);
          txt_S1->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_S1
        { txt_P3 = new Fl_Input2(310, 362, 240, 24, _("Pos."));
          txt_P3->tooltip(_("Position of preparer"));
          txt_P3->box(FL_DOWN_BOX);
          txt_P3->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_P3->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_P3->labeltype(FL_NORMAL_LABEL);
          txt_P3->labelfont(0);
          txt_P3->labelsize(14);
          txt_P3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_P3->align(FL_ALIGN_LEFT);
          txt_P3->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_P3
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 45, 551, 346, _("Responder"));
        o->hide();
        { txt_S2 = new Fl_Input2(36, 360, 240, 24, _("Sig."));
          txt_S2->tooltip(_("Signature of responder"));
          txt_S2->box(FL_DOWN_BOX);
          txt_S2->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_S2->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_S2->labeltype(FL_NORMAL_LABEL);
          txt_S2->labelfont(0);
          txt_S2->labelsize(14);
          txt_S2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_S2->align(FL_ALIGN_LEFT);
          txt_S2->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_S2
        { txt_D2 = new Fl_DateInput(238, 51, 122, 24, _("Date"));
          txt_D2->tooltip(_("Reply Date"));
          txt_D2->box(FL_DOWN_BOX);
          txt_D2->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_D2->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_D2->labeltype(FL_NORMAL_LABEL);
          txt_D2->labelfont(0);
          txt_D2->labelsize(14);
          txt_D2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_D2->align(FL_ALIGN_LEFT);
          txt_D2->when(FL_WHEN_RELEASE);
        } // Fl_DateInput* txt_D2
        { txt_T2 = new Fl_Input2(423, 51, 100, 24, _("Time"));
          txt_T2->tooltip(_("Reply Time"));
          txt_T2->box(FL_DOWN_BOX);
          txt_T2->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_T2->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_T2->labeltype(FL_NORMAL_LABEL);
          txt_T2->labelfont(0);
          txt_T2->labelsize(14);
          txt_T2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_T2->align(FL_ALIGN_LEFT);
          txt_T2->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_T2
        { btnTime2 = new Fl_Button(526, 53, 20, 20, _("..."));
          btnTime2->callback((Fl_Callback*)cb_btnTime2);
        } // Fl_Button* btnTime2
        { txt_Reply = new FTextEdit(6, 81, 545, 275, _("Reply"));
          txt_Reply->box(FL_DOWN_FRAME);
          txt_Reply->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_Reply->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_Reply->labeltype(FL_NORMAL_LABEL);
          txt_Reply->labelfont(0);
          txt_Reply->labelsize(14);
          txt_Reply->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_Reply->align(FL_ALIGN_TOP_LEFT);
          txt_Reply->when(FL_WHEN_RELEASE);
        } // FTextEdit* txt_Reply
        { txt_P4 = new Fl_Input2(313, 360, 235, 24, _("Pos."));
          txt_P4->tooltip(_("Position of responder"));
          txt_P4->box(FL_DOWN_BOX);
          txt_P4->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_P4->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_P4->labeltype(FL_NORMAL_LABEL);
          txt_P4->labelfont(0);
          txt_P4->labelsize(14);
          txt_P4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_P4->align(FL_ALIGN_LEFT);
          txt_P4->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_P4
        { btnDate2 = new Fl_Button(361, 53, 20, 20, _("..."));
          btnDate2->callback((Fl_Callback*)cb_btnDate2);
        } // Fl_Button* btnDate2
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Tabs* o
    { txt_filename = new Fl_Output(260, 22, 205, 20, _("filename:"));
      txt_filename->box(FL_FLAT_BOX);
      txt_filename->color((Fl_Color)FL_BACKGROUND_COLOR);
    } // Fl_Output* txt_filename
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *brwsOptions=(Fl_Browser *)0;

Fl_Return_Button *btnCloseOptions=(Fl_Return_Button *)0;

static void cb_btnCloseOptions(Fl_Return_Button*, void*) {
  closeoptions();
}

Fl_Double_Window* optionsdialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(411, 263, _("Command Line Options"));
    w = o;
    { brwsOptions = new Fl_Browser(3, 31, 405, 202);
    } // Fl_Browser* brwsOptions
    { btnCloseOptions = new Fl_Return_Button(329, 239, 72, 20, _("OK"));
      btnCloseOptions->callback((Fl_Callback*)cb_btnCloseOptions);
    } // Fl_Return_Button* btnCloseOptions
    { Fl_Box* o = new Fl_Box(4, 7, 401, 21, _("usage: flics -<option> [filename]"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)FL_LIGHT3);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
