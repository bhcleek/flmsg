// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "flmsg_dialog.h"
#include "status.h"
#include "flmsg.h"

static void cb_mnuNew(Fl_Menu_*, void*) {
  cb_new();
}

static void cb_mnuOpen(Fl_Menu_*, void*) {
  cb_open();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  cb_save();
}

static void cb_mnuSaveAs(Fl_Menu_*, void*) {
  cb_save_as();
}

static void cb_mnu_html(Fl_Menu_*, void*) {
  cb_html();
}

static void cb_mnu_html_fcopy(Fl_Menu_*, void*) {
  cb_html_fcopy();
}

static void cb_mnu_text(Fl_Menu_*, void*) {
  cb_text();
}

static void cb_mnu_qimport(Fl_Menu_*, void*) {
  cb_import();
}

static void cb_mnu_qexport(Fl_Menu_*, void*) {
  cb_export();
}

static void cb_mnuWrapImport(Fl_Menu_*, void*) {
  cb_wrap_import();
}

static void cb_mnuWrapExport(Fl_Menu_*, void*) {
  cb_wrap_export();
}

static void cb_mnuAutoSend(Fl_Menu_*, void*) {
  cb_wrap_autosend();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cb_exit();
}

static void cb_mnu_load_template(Fl_Menu_*, void*) {
  cb_load_template();
}

static void cb_mnu_save_template(Fl_Menu_*, void*) {
  cb_save_template();
}

static void cb_mnu_save_as_template(Fl_Menu_*, void*) {
  cb_save_as_template();
}

static void cb_mnuConfig(Fl_Menu_*, void*) {
  cb_config();
}

static void cb_mnuOptions(Fl_Menu_*, void*) {
  showoptions();
}

static void cb_mnuOnLineHelp(Fl_Menu_*, void*) {
  show_help();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  cb_About();
}

Fl_Menu_Item menu_[] = {
 {_("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&New"), 0x4006e,  (Fl_Callback*)cb_mnuNew, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Open"), 0x4006f,  (Fl_Callback*)cb_mnuOpen, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Save"), 0x40073,  (Fl_Callback*)cb_mnuSave, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save &As"), 0x40061,  (Fl_Callback*)cb_mnuSaveAs, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("View"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Html delivery"), 0,  (Fl_Callback*)cb_mnu_html, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Html file copy"), 0,  (Fl_Callback*)cb_mnu_html_fcopy, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Plain Text"), 0,  (Fl_Callback*)cb_mnu_text, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Q-forms"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnu_qimport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnu_qexport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Wrap"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnuWrapImport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnuWrapExport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("AutoSend"), 0,  (Fl_Callback*)cb_mnuAutoSend, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("E&xit"), 0x40078,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Template"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Load"), 0,  (Fl_Callback*)cb_mnu_load_template, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save"), 0,  (Fl_Callback*)cb_mnu_save_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save As"), 0,  (Fl_Callback*)cb_mnu_save_as_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Config"), 0,  (Fl_Callback*)cb_mnuConfig, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("      "), 0,  0, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Command line options"), 0,  (Fl_Callback*)cb_mnuOptions, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("On Line help"), 0,  (Fl_Callback*)cb_mnuOnLineHelp, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Output *txt_filename=(Fl_Output *)0;

Fl_Tabs *tabs_msg_type=(Fl_Tabs *)0;

static void cb_tabs_msg_type(Fl_Tabs*, void*) {
  cb_msg_type();
}

Fl_Group *tab_ics=(Fl_Group *)0;

Fl_Tabs *tab_ics_type=(Fl_Tabs *)0;

static void cb_tab_ics_type(Fl_Tabs*, void*) {
  cb_msg_type();
}

Fl_Group *tab_ics205=(Fl_Group *)0;

Fl_Input2 *txt_205_name=(Fl_Input2 *)0;

Fl_Input2 *txt_205_dt_prepared=(Fl_Input2 *)0;

Fl_Button *btn_205DateTime1=(Fl_Button *)0;

static void cb_btn_205DateTime1(Fl_Button*, void*) {
  cb_205_SetDateTime1();
}

Fl_Input2 *txt_205_dt_operational=(Fl_Input2 *)0;

Fl_Button *btn_205_DateTime2=(Fl_Button *)0;

static void cb_btn_205_DateTime2(Fl_Button*, void*) {
  cb_205_SetDateTime2();
}

Fl_Input2 *txt_205_type[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_channel[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_function[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_freqtone[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_assignment[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_remarks[8]={(Fl_Input2 *)0};

Fl_Input2 *txt_205_preparer=(Fl_Input2 *)0;

Fl_Group *tab_ics213=(Fl_Group *)0;

Fl_Tabs *tab_ics213_type=(Fl_Tabs *)0;

Fl_Group *tab_originator=(Fl_Group *)0;

Fl_Input2 *txt_213_to=(Fl_Input2 *)0;

Fl_Input2 *txt_213_p1=(Fl_Input2 *)0;

Fl_Input2 *txt_213_fm=(Fl_Input2 *)0;

Fl_Input2 *txt_213_p2=(Fl_Input2 *)0;

Fl_Input2 *txt_213_subj=(Fl_Input2 *)0;

Fl_DateInput *txt_213_d1=(Fl_DateInput *)0;

Fl_Button *btn_213_date1=(Fl_Button *)0;

static void cb_btn_213_date1(Fl_Button*, void*) {
  cb_SetDate1();
}

Fl_Input2 *txt_213_t1=(Fl_Input2 *)0;

Fl_Button *btn_213_time1=(Fl_Button *)0;

static void cb_btn_213_time1(Fl_Button*, void*) {
  cb_SetTime1();
}

FTextEdit *txt_213_msg=(FTextEdit *)0;

Fl_Input2 *txt_213_s1=(Fl_Input2 *)0;

Fl_Input2 *txt_213_p3=(Fl_Input2 *)0;

Fl_Group *tab_responder=(Fl_Group *)0;

Fl_Input2 *txt_213_s2=(Fl_Input2 *)0;

Fl_DateInput *txt_213_d2=(Fl_DateInput *)0;

Fl_Input2 *txt_213_t2=(Fl_Input2 *)0;

Fl_Button *btn_213_time2=(Fl_Button *)0;

static void cb_btn_213_time2(Fl_Button*, void*) {
  cb_SetTime2();
}

FTextEdit *txt_213_reply=(FTextEdit *)0;

Fl_Input2 *txt_213_p4=(Fl_Input2 *)0;

Fl_Button *btn_213_date2=(Fl_Button *)0;

static void cb_btn_213_date2(Fl_Button*, void*) {
  cb_SetDate2();
}

Fl_Group *tab_radiogram=(Fl_Group *)0;

Fl_Tabs *tabs_radiogram=(Fl_Tabs *)0;

Fl_Group *tab_radiogram_message=(Fl_Group *)0;

Fl_Input2 *txt_rg_nbr=(Fl_Input2 *)0;

static void cb_txt_rg_nbr(Fl_Input2*, void*) {
  cb_rg_nbr(txt_rg_nbr);
}

Fl_Choice *sel_rg_prec=(Fl_Choice *)0;

Fl_Input2 *txt_rg_hx=(Fl_Input2 *)0;

Fl_Button *btn_rg_hx=(Fl_Button *)0;

static void cb_btn_rg_hx(Fl_Button*, void*) {
  cb_hx();
}

Fl_Input2 *txt_rg_station=(Fl_Input2 *)0;

static void cb_txt_rg_station(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_station);
}

Fl_Input2 *txt_rg_place=(Fl_Input2 *)0;

static void cb_txt_rg_place(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_place);
}

Fl_Input2 *txt_rg_t1=(Fl_Input2 *)0;

Fl_Button *btn_rgTime1=(Fl_Button *)0;

static void cb_btn_rgTime1(Fl_Button*, void*) {
  cb_rgSetTime1();
}

Fl_Input2 *txt_rg_d1=(Fl_Input2 *)0;

Fl_Button *btn_rgDate1=(Fl_Button *)0;

static void cb_btn_rgDate1(Fl_Button*, void*) {
  cb_rgSetDate1();
}

Fl_Input2 *txt_rg_to=(Fl_Input2 *)0;

static void cb_txt_rg_to(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_to);
}

Fl_Input2 *txt_rg_phone=(Fl_Input2 *)0;

static void cb_txt_rg_phone(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_phone);
}

Fl_Input2 *txt_rg_opnote=(Fl_Input2 *)0;

static void cb_txt_rg_opnote(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_opnote);
}

FTextEdit *txt_rg_msg=(FTextEdit *)0;

static void cb_txt_rg_msg(FTextEdit*, void*) {
  btn_rg_check->labelcolor(FL_RED);
btn_rg_check->redraw_label();
}

Fl_Button *btn_arl=(Fl_Button *)0;

static void cb_btn_arl(Fl_Button*, void*) {
  cb_arl();
}

Fl_Input2 *txt_rg_check=(Fl_Input2 *)0;

Fl_Button *btn_rg_check=(Fl_Button *)0;

static void cb_btn_rg_check(Fl_Button*, void*) {
  cb_rg_check();
}

Fl_Input2 *txt_rg_sig=(Fl_Input2 *)0;

static void cb_txt_rg_sig(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_sig);
}

Fl_Input2 *txt_rg_opnote2=(Fl_Input2 *)0;

static void cb_txt_rg_opnote2(Fl_Input2*, void*) {
  cb_rg_filter_input(txt_rg_opnote2);
}

Fl_Check_Button *btn_rg_svc=(Fl_Check_Button *)0;

Fl_Group *tab_radiogram_information=(Fl_Group *)0;

Fl_Input2 *txt_rg_orig=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt2=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime2=(Fl_Button *)0;

static void cb_btn_rgDateTime2(Fl_Button*, void*) {
  cb_rgSetDateTime2();
}

Fl_Input2 *txt_rg_dt3=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime3=(Fl_Button *)0;

static void cb_btn_rgDateTime3(Fl_Button*, void*) {
  cb_rgSetDateTime3();
}

Fl_Input2 *txt_rg_dlvd_to=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_rcv_fm=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_rcv_net=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt4=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime4=(Fl_Button *)0;

static void cb_btn_rgDateTime4(Fl_Button*, void*) {
  cb_rgSetDateTime4();
}

Fl_Input2 *txt_rg_sent_to=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_snt_net=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt5=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime5=(Fl_Button *)0;

static void cb_btn_rgDateTime5(Fl_Button*, void*) {
  cb_rgSetDateTime5();
}

Fl_Group *tab_plaintext=(Fl_Group *)0;

Fl_Input2 *txt_pt_title=(Fl_Input2 *)0;

Fl_Input2 *txt_pt_to=(Fl_Input2 *)0;

Fl_Input2 *txt_pt_fm=(Fl_Input2 *)0;

Fl_Input2 *txt_pt_subj=(Fl_Input2 *)0;

FTextEdit *txt_pt_msg=(FTextEdit *)0;

Fl_DateInput *txt_pt_date=(Fl_DateInput *)0;

Fl_Button *btn_pt_date=(Fl_Button *)0;

static void cb_btn_pt_date(Fl_Button*, void*) {
  cb_set_pt_date();
}

Fl_Input2 *txt_pt_time=(Fl_Input2 *)0;

Fl_Button *btn_pt_time=(Fl_Button *)0;

static void cb_btn_pt_time(Fl_Button*, void*) {
  cb_set_pt_time();
}

Fl_Group *tab_blank=(Fl_Group *)0;

FTextEdit *txt_blank_msg=(FTextEdit *)0;

Fl_Double_Window* ics_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(570, 430, _("Standard Message Generator"));
    w = o;
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 280, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { txt_filename = new Fl_Output(363, 2, 205, 20, _("filename:"));
      txt_filename->box(FL_FLAT_BOX);
      txt_filename->color((Fl_Color)FL_BACKGROUND_COLOR);
    } // Fl_Output* txt_filename
    { tabs_msg_type = new Fl_Tabs(0, 22, 575, 405);
      tabs_msg_type->callback((Fl_Callback*)cb_tabs_msg_type);
      { tab_ics = new Fl_Group(0, 47, 571, 379, _("ICS"));
        { tab_ics_type = new Fl_Tabs(0, 47, 571, 379);
          tab_ics_type->callback((Fl_Callback*)cb_tab_ics_type);
          { tab_ics205 = new Fl_Group(0, 70, 570, 355, _("205"));
            tab_ics205->align(FL_ALIGN_TOP_LEFT);
            { Fl_Group* o = new Fl_Group(2, 76, 565, 67);
              o->box(FL_ENGRAVED_FRAME);
              { txt_205_name = new Fl_Input2(113, 80, 450, 24, _("Incident Name"));
                txt_205_name->tooltip(_("Addressee"));
                txt_205_name->box(FL_DOWN_BOX);
                txt_205_name->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_name->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_name->labeltype(FL_NORMAL_LABEL);
                txt_205_name->labelfont(0);
                txt_205_name->labelsize(14);
                txt_205_name->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_name->align(FL_ALIGN_LEFT);
                txt_205_name->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_name
              { txt_205_dt_prepared = new Fl_Input2(97, 112, 155, 24, _("DT/TM Prep\'"));
                txt_205_dt_prepared->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_205_dt_prepared->box(FL_DOWN_BOX);
                txt_205_dt_prepared->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_dt_prepared->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_dt_prepared->labeltype(FL_NORMAL_LABEL);
                txt_205_dt_prepared->labelfont(0);
                txt_205_dt_prepared->labelsize(14);
                txt_205_dt_prepared->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_dt_prepared->align(FL_ALIGN_LEFT);
                txt_205_dt_prepared->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_dt_prepared
              { btn_205DateTime1 = new Fl_Button(254, 112, 24, 24, _("..."));
                btn_205DateTime1->tooltip(_("Set today"));
                btn_205DateTime1->callback((Fl_Callback*)cb_btn_205DateTime1);
              } // Fl_Button* btn_205DateTime1
              { txt_205_dt_operational = new Fl_Input2(378, 112, 155, 24, _("DT/TM Oper\'"));
                txt_205_dt_operational->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_205_dt_operational->box(FL_DOWN_BOX);
                txt_205_dt_operational->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_dt_operational->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_dt_operational->labeltype(FL_NORMAL_LABEL);
                txt_205_dt_operational->labelfont(0);
                txt_205_dt_operational->labelsize(14);
                txt_205_dt_operational->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_dt_operational->align(FL_ALIGN_LEFT);
                txt_205_dt_operational->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_dt_operational
              { btn_205_DateTime2 = new Fl_Button(536, 112, 24, 24, _("..."));
                btn_205_DateTime2->tooltip(_("Set today"));
                btn_205_DateTime2->callback((Fl_Callback*)cb_btn_205_DateTime2);
              } // Fl_Button* btn_205_DateTime2
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(2, 145, 565, 245);
              o->box(FL_ENGRAVED_FRAME);
              { txt_205_type[0] = new Fl_Input2(5, 166, 90, 24, _("Radio Type"));
                txt_205_type[0]->tooltip(_("Addressee"));
                txt_205_type[0]->box(FL_DOWN_BOX);
                txt_205_type[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[0]->labelfont(0);
                txt_205_type[0]->labelsize(14);
                txt_205_type[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[0]
              { txt_205_channel[0] = new Fl_Input2(97, 166, 63, 24, _("Channel"));
                txt_205_channel[0]->tooltip(_("Addressee"));
                txt_205_channel[0]->box(FL_DOWN_BOX);
                txt_205_channel[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[0]->labelfont(0);
                txt_205_channel[0]->labelsize(14);
                txt_205_channel[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[0]
              { txt_205_function[0] = new Fl_Input2(164, 165, 80, 24, _("Function"));
                txt_205_function[0]->tooltip(_("Addressee"));
                txt_205_function[0]->box(FL_DOWN_BOX);
                txt_205_function[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[0]->labelfont(0);
                txt_205_function[0]->labelsize(14);
                txt_205_function[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[0]
              { txt_205_freqtone[0] = new Fl_Input2(247, 165, 80, 24, _("Freq/Tone"));
                txt_205_freqtone[0]->tooltip(_("Addressee"));
                txt_205_freqtone[0]->box(FL_DOWN_BOX);
                txt_205_freqtone[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[0]->labelfont(0);
                txt_205_freqtone[0]->labelsize(14);
                txt_205_freqtone[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[0]
              { txt_205_assignment[0] = new Fl_Input2(330, 165, 90, 24, _("Assignment"));
                txt_205_assignment[0]->tooltip(_("Addressee"));
                txt_205_assignment[0]->box(FL_DOWN_BOX);
                txt_205_assignment[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[0]->labelfont(0);
                txt_205_assignment[0]->labelsize(14);
                txt_205_assignment[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[0]
              { txt_205_remarks[0] = new Fl_Input2(422, 165, 140, 24, _("Remarks"));
                txt_205_remarks[0]->tooltip(_("Addressee"));
                txt_205_remarks[0]->box(FL_DOWN_BOX);
                txt_205_remarks[0]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[0]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[0]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[0]->labelfont(0);
                txt_205_remarks[0]->labelsize(14);
                txt_205_remarks[0]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[0]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[0]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[0]
              { txt_205_type[1] = new Fl_Input2(5, 194, 90, 24);
                txt_205_type[1]->tooltip(_("Addressee"));
                txt_205_type[1]->box(FL_DOWN_BOX);
                txt_205_type[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[1]->labelfont(0);
                txt_205_type[1]->labelsize(14);
                txt_205_type[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[1]
              { txt_205_channel[1] = new Fl_Input2(97, 193, 63, 24);
                txt_205_channel[1]->tooltip(_("Addressee"));
                txt_205_channel[1]->box(FL_DOWN_BOX);
                txt_205_channel[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[1]->labelfont(0);
                txt_205_channel[1]->labelsize(14);
                txt_205_channel[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[1]
              { txt_205_function[1] = new Fl_Input2(164, 193, 80, 24);
                txt_205_function[1]->tooltip(_("Addressee"));
                txt_205_function[1]->box(FL_DOWN_BOX);
                txt_205_function[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[1]->labelfont(0);
                txt_205_function[1]->labelsize(14);
                txt_205_function[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[1]
              { txt_205_freqtone[1] = new Fl_Input2(247, 193, 80, 24);
                txt_205_freqtone[1]->tooltip(_("Addressee"));
                txt_205_freqtone[1]->box(FL_DOWN_BOX);
                txt_205_freqtone[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[1]->labelfont(0);
                txt_205_freqtone[1]->labelsize(14);
                txt_205_freqtone[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[1]
              { txt_205_assignment[1] = new Fl_Input2(330, 193, 90, 24);
                txt_205_assignment[1]->tooltip(_("Addressee"));
                txt_205_assignment[1]->box(FL_DOWN_BOX);
                txt_205_assignment[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[1]->labelfont(0);
                txt_205_assignment[1]->labelsize(14);
                txt_205_assignment[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[1]
              { txt_205_remarks[1] = new Fl_Input2(422, 193, 140, 24);
                txt_205_remarks[1]->tooltip(_("Addressee"));
                txt_205_remarks[1]->box(FL_DOWN_BOX);
                txt_205_remarks[1]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[1]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[1]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[1]->labelfont(0);
                txt_205_remarks[1]->labelsize(14);
                txt_205_remarks[1]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[1]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[1]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[1]
              { txt_205_type[2] = new Fl_Input2(5, 222, 90, 24);
                txt_205_type[2]->tooltip(_("Addressee"));
                txt_205_type[2]->box(FL_DOWN_BOX);
                txt_205_type[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[2]->labelfont(0);
                txt_205_type[2]->labelsize(14);
                txt_205_type[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[2]
              { txt_205_channel[2] = new Fl_Input2(97, 221, 63, 24);
                txt_205_channel[2]->tooltip(_("Addressee"));
                txt_205_channel[2]->box(FL_DOWN_BOX);
                txt_205_channel[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[2]->labelfont(0);
                txt_205_channel[2]->labelsize(14);
                txt_205_channel[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[2]
              { txt_205_function[2] = new Fl_Input2(164, 221, 80, 24);
                txt_205_function[2]->tooltip(_("Addressee"));
                txt_205_function[2]->box(FL_DOWN_BOX);
                txt_205_function[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[2]->labelfont(0);
                txt_205_function[2]->labelsize(14);
                txt_205_function[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[2]
              { txt_205_freqtone[2] = new Fl_Input2(247, 221, 80, 24);
                txt_205_freqtone[2]->tooltip(_("Addressee"));
                txt_205_freqtone[2]->box(FL_DOWN_BOX);
                txt_205_freqtone[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[2]->labelfont(0);
                txt_205_freqtone[2]->labelsize(14);
                txt_205_freqtone[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[2]
              { txt_205_assignment[2] = new Fl_Input2(330, 221, 90, 24);
                txt_205_assignment[2]->tooltip(_("Addressee"));
                txt_205_assignment[2]->box(FL_DOWN_BOX);
                txt_205_assignment[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[2]->labelfont(0);
                txt_205_assignment[2]->labelsize(14);
                txt_205_assignment[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[2]
              { txt_205_remarks[2] = new Fl_Input2(422, 221, 140, 24);
                txt_205_remarks[2]->tooltip(_("Addressee"));
                txt_205_remarks[2]->box(FL_DOWN_BOX);
                txt_205_remarks[2]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[2]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[2]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[2]->labelfont(0);
                txt_205_remarks[2]->labelsize(14);
                txt_205_remarks[2]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[2]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[2]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[2]
              { txt_205_type[3] = new Fl_Input2(5, 250, 90, 24);
                txt_205_type[3]->tooltip(_("Addressee"));
                txt_205_type[3]->box(FL_DOWN_BOX);
                txt_205_type[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[3]->labelfont(0);
                txt_205_type[3]->labelsize(14);
                txt_205_type[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[3]
              { txt_205_channel[3] = new Fl_Input2(97, 249, 63, 24);
                txt_205_channel[3]->tooltip(_("Addressee"));
                txt_205_channel[3]->box(FL_DOWN_BOX);
                txt_205_channel[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[3]->labelfont(0);
                txt_205_channel[3]->labelsize(14);
                txt_205_channel[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[3]
              { txt_205_function[3] = new Fl_Input2(164, 249, 80, 24);
                txt_205_function[3]->tooltip(_("Addressee"));
                txt_205_function[3]->box(FL_DOWN_BOX);
                txt_205_function[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[3]->labelfont(0);
                txt_205_function[3]->labelsize(14);
                txt_205_function[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[3]
              { txt_205_freqtone[3] = new Fl_Input2(247, 249, 80, 24);
                txt_205_freqtone[3]->tooltip(_("Addressee"));
                txt_205_freqtone[3]->box(FL_DOWN_BOX);
                txt_205_freqtone[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[3]->labelfont(0);
                txt_205_freqtone[3]->labelsize(14);
                txt_205_freqtone[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[3]
              { txt_205_assignment[3] = new Fl_Input2(330, 249, 90, 24);
                txt_205_assignment[3]->tooltip(_("Addressee"));
                txt_205_assignment[3]->box(FL_DOWN_BOX);
                txt_205_assignment[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[3]->labelfont(0);
                txt_205_assignment[3]->labelsize(14);
                txt_205_assignment[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[3]
              { txt_205_remarks[3] = new Fl_Input2(422, 249, 140, 24);
                txt_205_remarks[3]->tooltip(_("Addressee"));
                txt_205_remarks[3]->box(FL_DOWN_BOX);
                txt_205_remarks[3]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[3]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[3]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[3]->labelfont(0);
                txt_205_remarks[3]->labelsize(14);
                txt_205_remarks[3]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[3]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[3]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[3]
              { txt_205_type[4] = new Fl_Input2(5, 278, 90, 24);
                txt_205_type[4]->tooltip(_("Addressee"));
                txt_205_type[4]->box(FL_DOWN_BOX);
                txt_205_type[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[4]->labelfont(0);
                txt_205_type[4]->labelsize(14);
                txt_205_type[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[4]
              { txt_205_channel[4] = new Fl_Input2(97, 277, 63, 24);
                txt_205_channel[4]->tooltip(_("Addressee"));
                txt_205_channel[4]->box(FL_DOWN_BOX);
                txt_205_channel[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[4]->labelfont(0);
                txt_205_channel[4]->labelsize(14);
                txt_205_channel[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[4]
              { txt_205_function[4] = new Fl_Input2(164, 277, 80, 24);
                txt_205_function[4]->tooltip(_("Addressee"));
                txt_205_function[4]->box(FL_DOWN_BOX);
                txt_205_function[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[4]->labelfont(0);
                txt_205_function[4]->labelsize(14);
                txt_205_function[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[4]
              { txt_205_freqtone[4] = new Fl_Input2(247, 277, 80, 24);
                txt_205_freqtone[4]->tooltip(_("Addressee"));
                txt_205_freqtone[4]->box(FL_DOWN_BOX);
                txt_205_freqtone[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[4]->labelfont(0);
                txt_205_freqtone[4]->labelsize(14);
                txt_205_freqtone[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[4]
              { txt_205_assignment[4] = new Fl_Input2(330, 277, 90, 24);
                txt_205_assignment[4]->tooltip(_("Addressee"));
                txt_205_assignment[4]->box(FL_DOWN_BOX);
                txt_205_assignment[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[4]->labelfont(0);
                txt_205_assignment[4]->labelsize(14);
                txt_205_assignment[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[4]
              { txt_205_remarks[4] = new Fl_Input2(422, 277, 140, 24);
                txt_205_remarks[4]->tooltip(_("Addressee"));
                txt_205_remarks[4]->box(FL_DOWN_BOX);
                txt_205_remarks[4]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[4]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[4]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[4]->labelfont(0);
                txt_205_remarks[4]->labelsize(14);
                txt_205_remarks[4]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[4]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[4]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[4]
              { txt_205_type[5] = new Fl_Input2(5, 306, 90, 24);
                txt_205_type[5]->tooltip(_("Addressee"));
                txt_205_type[5]->box(FL_DOWN_BOX);
                txt_205_type[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[5]->labelfont(0);
                txt_205_type[5]->labelsize(14);
                txt_205_type[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[5]
              { txt_205_channel[5] = new Fl_Input2(97, 305, 63, 24);
                txt_205_channel[5]->tooltip(_("Addressee"));
                txt_205_channel[5]->box(FL_DOWN_BOX);
                txt_205_channel[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[5]->labelfont(0);
                txt_205_channel[5]->labelsize(14);
                txt_205_channel[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[5]
              { txt_205_function[5] = new Fl_Input2(164, 305, 80, 24);
                txt_205_function[5]->tooltip(_("Addressee"));
                txt_205_function[5]->box(FL_DOWN_BOX);
                txt_205_function[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[5]->labelfont(0);
                txt_205_function[5]->labelsize(14);
                txt_205_function[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[5]
              { txt_205_freqtone[5] = new Fl_Input2(247, 305, 80, 24);
                txt_205_freqtone[5]->tooltip(_("Addressee"));
                txt_205_freqtone[5]->box(FL_DOWN_BOX);
                txt_205_freqtone[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[5]->labelfont(0);
                txt_205_freqtone[5]->labelsize(14);
                txt_205_freqtone[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[5]
              { txt_205_assignment[5] = new Fl_Input2(330, 305, 90, 24);
                txt_205_assignment[5]->tooltip(_("Addressee"));
                txt_205_assignment[5]->box(FL_DOWN_BOX);
                txt_205_assignment[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[5]->labelfont(0);
                txt_205_assignment[5]->labelsize(14);
                txt_205_assignment[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[5]
              { txt_205_remarks[5] = new Fl_Input2(422, 305, 140, 24);
                txt_205_remarks[5]->tooltip(_("Addressee"));
                txt_205_remarks[5]->box(FL_DOWN_BOX);
                txt_205_remarks[5]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[5]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[5]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[5]->labelfont(0);
                txt_205_remarks[5]->labelsize(14);
                txt_205_remarks[5]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[5]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[5]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[5]
              { txt_205_type[6] = new Fl_Input2(5, 334, 90, 24);
                txt_205_type[6]->tooltip(_("Addressee"));
                txt_205_type[6]->box(FL_DOWN_BOX);
                txt_205_type[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[6]->labelfont(0);
                txt_205_type[6]->labelsize(14);
                txt_205_type[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[6]
              { txt_205_channel[6] = new Fl_Input2(97, 333, 63, 24);
                txt_205_channel[6]->tooltip(_("Addressee"));
                txt_205_channel[6]->box(FL_DOWN_BOX);
                txt_205_channel[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[6]->labelfont(0);
                txt_205_channel[6]->labelsize(14);
                txt_205_channel[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[6]
              { txt_205_function[6] = new Fl_Input2(164, 333, 80, 24);
                txt_205_function[6]->tooltip(_("Addressee"));
                txt_205_function[6]->box(FL_DOWN_BOX);
                txt_205_function[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[6]->labelfont(0);
                txt_205_function[6]->labelsize(14);
                txt_205_function[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[6]
              { txt_205_freqtone[6] = new Fl_Input2(247, 333, 80, 24);
                txt_205_freqtone[6]->tooltip(_("Addressee"));
                txt_205_freqtone[6]->box(FL_DOWN_BOX);
                txt_205_freqtone[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[6]->labelfont(0);
                txt_205_freqtone[6]->labelsize(14);
                txt_205_freqtone[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[6]
              { txt_205_assignment[6] = new Fl_Input2(330, 333, 90, 24);
                txt_205_assignment[6]->tooltip(_("Addressee"));
                txt_205_assignment[6]->box(FL_DOWN_BOX);
                txt_205_assignment[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[6]->labelfont(0);
                txt_205_assignment[6]->labelsize(14);
                txt_205_assignment[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[6]
              { txt_205_remarks[6] = new Fl_Input2(422, 333, 140, 24);
                txt_205_remarks[6]->tooltip(_("Addressee"));
                txt_205_remarks[6]->box(FL_DOWN_BOX);
                txt_205_remarks[6]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[6]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[6]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[6]->labelfont(0);
                txt_205_remarks[6]->labelsize(14);
                txt_205_remarks[6]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[6]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[6]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[6]
              { txt_205_type[7] = new Fl_Input2(5, 362, 90, 24);
                txt_205_type[7]->tooltip(_("Addressee"));
                txt_205_type[7]->box(FL_DOWN_BOX);
                txt_205_type[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_type[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_type[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_type[7]->labelfont(0);
                txt_205_type[7]->labelsize(14);
                txt_205_type[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_type[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_type[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_type[7]
              { txt_205_channel[7] = new Fl_Input2(97, 362, 63, 24);
                txt_205_channel[7]->tooltip(_("Addressee"));
                txt_205_channel[7]->box(FL_DOWN_BOX);
                txt_205_channel[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_channel[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_channel[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_channel[7]->labelfont(0);
                txt_205_channel[7]->labelsize(14);
                txt_205_channel[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_channel[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_channel[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_channel[7]
              { txt_205_function[7] = new Fl_Input2(164, 362, 80, 24);
                txt_205_function[7]->tooltip(_("Addressee"));
                txt_205_function[7]->box(FL_DOWN_BOX);
                txt_205_function[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_function[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_function[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_function[7]->labelfont(0);
                txt_205_function[7]->labelsize(14);
                txt_205_function[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_function[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_function[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_function[7]
              { txt_205_freqtone[7] = new Fl_Input2(247, 362, 80, 24);
                txt_205_freqtone[7]->tooltip(_("Addressee"));
                txt_205_freqtone[7]->box(FL_DOWN_BOX);
                txt_205_freqtone[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_freqtone[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_freqtone[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_freqtone[7]->labelfont(0);
                txt_205_freqtone[7]->labelsize(14);
                txt_205_freqtone[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_freqtone[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_freqtone[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_freqtone[7]
              { txt_205_assignment[7] = new Fl_Input2(330, 362, 90, 24);
                txt_205_assignment[7]->tooltip(_("Addressee"));
                txt_205_assignment[7]->box(FL_DOWN_BOX);
                txt_205_assignment[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_assignment[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_assignment[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_assignment[7]->labelfont(0);
                txt_205_assignment[7]->labelsize(14);
                txt_205_assignment[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_assignment[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_assignment[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_assignment[7]
              { txt_205_remarks[7] = new Fl_Input2(422, 362, 140, 24);
                txt_205_remarks[7]->tooltip(_("Addressee"));
                txt_205_remarks[7]->box(FL_DOWN_BOX);
                txt_205_remarks[7]->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_remarks[7]->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_remarks[7]->labeltype(FL_NORMAL_LABEL);
                txt_205_remarks[7]->labelfont(0);
                txt_205_remarks[7]->labelsize(14);
                txt_205_remarks[7]->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_remarks[7]->align(FL_ALIGN_TOP_LEFT);
                txt_205_remarks[7]->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_remarks[7]
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(2, 391, 565, 30);
              o->box(FL_ENGRAVED_BOX);
              { txt_205_preparer = new Fl_Input2(77, 394, 485, 24, _("Preparer:"));
                txt_205_preparer->tooltip(_("Addressee"));
                txt_205_preparer->box(FL_DOWN_BOX);
                txt_205_preparer->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_205_preparer->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_205_preparer->labeltype(FL_NORMAL_LABEL);
                txt_205_preparer->labelfont(0);
                txt_205_preparer->labelsize(14);
                txt_205_preparer->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_205_preparer->align(FL_ALIGN_LEFT);
                txt_205_preparer->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_205_preparer
              o->end();
            } // Fl_Group* o
            tab_ics205->end();
          } // Fl_Group* tab_ics205
          { tab_ics213 = new Fl_Group(0, 70, 571, 355, _("213"));
            tab_ics213->align(FL_ALIGN_TOP_LEFT);
            tab_ics213->hide();
            { tab_ics213_type = new Fl_Tabs(0, 72, 571, 352);
              tab_ics213_type->align(FL_ALIGN_TOP_LEFT);
              { tab_originator = new Fl_Group(0, 98, 570, 325, _("Originator"));
                { txt_213_to = new Fl_Input2(40, 110, 242, 24, _("To"));
                txt_213_to->tooltip(_("Addressee"));
                txt_213_to->box(FL_DOWN_BOX);
                txt_213_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_to->labeltype(FL_NORMAL_LABEL);
                txt_213_to->labelfont(0);
                txt_213_to->labelsize(14);
                txt_213_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_to->align(FL_ALIGN_LEFT);
                txt_213_to->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_to
                { txt_213_p1 = new Fl_Input2(321, 110, 242, 24, _("Pos."));
                txt_213_p1->tooltip(_("Position of addressee"));
                txt_213_p1->box(FL_DOWN_BOX);
                txt_213_p1->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_p1->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_p1->labeltype(FL_NORMAL_LABEL);
                txt_213_p1->labelfont(0);
                txt_213_p1->labelsize(14);
                txt_213_p1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_p1->align(FL_ALIGN_LEFT);
                txt_213_p1->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_p1
                { txt_213_fm = new Fl_Input2(40, 136, 242, 24, _("Fm"));
                txt_213_fm->tooltip(_("Originator"));
                txt_213_fm->box(FL_DOWN_BOX);
                txt_213_fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_fm->labeltype(FL_NORMAL_LABEL);
                txt_213_fm->labelfont(0);
                txt_213_fm->labelsize(14);
                txt_213_fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_fm->align(FL_ALIGN_LEFT);
                txt_213_fm->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_fm
                { txt_213_p2 = new Fl_Input2(321, 136, 242, 24, _("Pos."));
                txt_213_p2->tooltip(_("Position of originator"));
                txt_213_p2->box(FL_DOWN_BOX);
                txt_213_p2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_p2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_p2->labeltype(FL_NORMAL_LABEL);
                txt_213_p2->labelfont(0);
                txt_213_p2->labelsize(14);
                txt_213_p2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_p2->align(FL_ALIGN_LEFT);
                txt_213_p2->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_p2
                { txt_213_subj = new Fl_Input2(40, 162, 522, 24, _("Sub."));
                txt_213_subj->tooltip(_("Subject"));
                txt_213_subj->box(FL_DOWN_BOX);
                txt_213_subj->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_subj->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_subj->labeltype(FL_NORMAL_LABEL);
                txt_213_subj->labelfont(0);
                txt_213_subj->labelsize(14);
                txt_213_subj->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_subj->align(FL_ALIGN_LEFT);
                txt_213_subj->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_subj
                { txt_213_d1 = new Fl_DateInput(232, 188, 125, 24, _("Date"));
                txt_213_d1->tooltip(_("Date of origination"));
                txt_213_d1->box(FL_DOWN_BOX);
                txt_213_d1->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_d1->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_d1->labeltype(FL_NORMAL_LABEL);
                txt_213_d1->labelfont(0);
                txt_213_d1->labelsize(14);
                txt_213_d1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_d1->align(FL_ALIGN_LEFT);
                txt_213_d1->when(FL_WHEN_RELEASE);
                txt_213_d1->format(2);
                } // Fl_DateInput* txt_213_d1
                { btn_213_date1 = new Fl_Button(365, 190, 20, 20, _("..."));
                btn_213_date1->tooltip(_("Set today"));
                btn_213_date1->callback((Fl_Callback*)cb_btn_213_date1);
                } // Fl_Button* btn_213_date1
                { txt_213_t1 = new Fl_Input2(430, 188, 103, 24, _("Time"));
                txt_213_t1->tooltip(_("Time of origination"));
                txt_213_t1->box(FL_DOWN_BOX);
                txt_213_t1->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_t1->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_t1->labeltype(FL_NORMAL_LABEL);
                txt_213_t1->labelfont(0);
                txt_213_t1->labelsize(14);
                txt_213_t1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_t1->align(FL_ALIGN_LEFT);
                txt_213_t1->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_t1
                { btn_213_time1 = new Fl_Button(540, 190, 20, 20, _("..."));
                btn_213_time1->tooltip(_("Set time now"));
                btn_213_time1->callback((Fl_Callback*)cb_btn_213_time1);
                } // Fl_Button* btn_213_time1
                { txt_213_msg = new FTextEdit(5, 218, 562, 175, _("Message:"));
                txt_213_msg->box(FL_DOWN_FRAME);
                txt_213_msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_msg->labeltype(FL_NORMAL_LABEL);
                txt_213_msg->labelfont(0);
                txt_213_msg->labelsize(14);
                txt_213_msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_msg->align(FL_ALIGN_TOP_LEFT);
                txt_213_msg->when(FL_WHEN_RELEASE);
                Fl_Group::current()->resizable(txt_213_msg);
                } // FTextEdit* txt_213_msg
                { txt_213_s1 = new Fl_Input2(33, 396, 247, 24, _("Sig."));
                txt_213_s1->tooltip(_("Signature of preparer"));
                txt_213_s1->box(FL_DOWN_BOX);
                txt_213_s1->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_s1->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_s1->labeltype(FL_NORMAL_LABEL);
                txt_213_s1->labelfont(0);
                txt_213_s1->labelsize(14);
                txt_213_s1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_s1->align(FL_ALIGN_LEFT);
                txt_213_s1->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_s1
                { txt_213_p3 = new Fl_Input2(316, 396, 247, 24, _("Pos."));
                txt_213_p3->tooltip(_("Position of preparer"));
                txt_213_p3->box(FL_DOWN_BOX);
                txt_213_p3->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_p3->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_p3->labeltype(FL_NORMAL_LABEL);
                txt_213_p3->labelfont(0);
                txt_213_p3->labelsize(14);
                txt_213_p3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_p3->align(FL_ALIGN_LEFT);
                txt_213_p3->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_p3
                tab_originator->end();
              } // Fl_Group* tab_originator
              { tab_responder = new Fl_Group(1, 98, 570, 325, _("Responder"));
                tab_responder->hide();
                { txt_213_s2 = new Fl_Input2(37, 396, 248, 24, _("Sig."));
                txt_213_s2->tooltip(_("Signature of responder"));
                txt_213_s2->box(FL_DOWN_BOX);
                txt_213_s2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_s2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_s2->labeltype(FL_NORMAL_LABEL);
                txt_213_s2->labelfont(0);
                txt_213_s2->labelsize(14);
                txt_213_s2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_s2->align(FL_ALIGN_LEFT);
                txt_213_s2->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_s2
                { txt_213_d2 = new Fl_DateInput(243, 112, 126, 24, _("Date"));
                txt_213_d2->tooltip(_("Reply Date"));
                txt_213_d2->box(FL_DOWN_BOX);
                txt_213_d2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_d2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_d2->labeltype(FL_NORMAL_LABEL);
                txt_213_d2->labelfont(0);
                txt_213_d2->labelsize(14);
                txt_213_d2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_d2->align(FL_ALIGN_LEFT);
                txt_213_d2->when(FL_WHEN_RELEASE);
                } // Fl_DateInput* txt_213_d2
                { txt_213_t2 = new Fl_Input2(434, 112, 103, 24, _("Time"));
                txt_213_t2->tooltip(_("Reply Time"));
                txt_213_t2->box(FL_DOWN_BOX);
                txt_213_t2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_t2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_t2->labeltype(FL_NORMAL_LABEL);
                txt_213_t2->labelfont(0);
                txt_213_t2->labelsize(14);
                txt_213_t2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_t2->align(FL_ALIGN_LEFT);
                txt_213_t2->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_t2
                { btn_213_time2 = new Fl_Button(540, 112, 24, 24, _("..."));
                btn_213_time2->tooltip(_("Now"));
                btn_213_time2->callback((Fl_Callback*)cb_btn_213_time2);
                } // Fl_Button* btn_213_time2
                { txt_213_reply = new FTextEdit(5, 142, 562, 250, _("Reply"));
                txt_213_reply->box(FL_DOWN_FRAME);
                txt_213_reply->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_reply->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_reply->labeltype(FL_NORMAL_LABEL);
                txt_213_reply->labelfont(0);
                txt_213_reply->labelsize(14);
                txt_213_reply->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_reply->align(FL_ALIGN_TOP_LEFT);
                txt_213_reply->when(FL_WHEN_RELEASE);
                } // FTextEdit* txt_213_reply
                { txt_213_p4 = new Fl_Input2(323, 396, 242, 24, _("Pos."));
                txt_213_p4->tooltip(_("Position of responder"));
                txt_213_p4->box(FL_DOWN_BOX);
                txt_213_p4->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_213_p4->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_213_p4->labeltype(FL_NORMAL_LABEL);
                txt_213_p4->labelfont(0);
                txt_213_p4->labelsize(14);
                txt_213_p4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_213_p4->align(FL_ALIGN_LEFT);
                txt_213_p4->when(FL_WHEN_RELEASE);
                } // Fl_Input2* txt_213_p4
                { btn_213_date2 = new Fl_Button(370, 112, 24, 24, _("..."));
                btn_213_date2->tooltip(_("Today"));
                btn_213_date2->callback((Fl_Callback*)cb_btn_213_date2);
                } // Fl_Button* btn_213_date2
                tab_responder->end();
                Fl_Group::current()->resizable(tab_responder);
              } // Fl_Group* tab_responder
              tab_ics213_type->end();
              Fl_Group::current()->resizable(tab_ics213_type);
            } // Fl_Tabs* tab_ics213_type
            tab_ics213->end();
          } // Fl_Group* tab_ics213
          tab_ics_type->end();
        } // Fl_Tabs* tab_ics_type
        tab_ics->end();
      } // Fl_Group* tab_ics
      { tab_radiogram = new Fl_Group(0, 45, 570, 380, _("Radiogram"));
        tab_radiogram->hide();
        { tabs_radiogram = new Fl_Tabs(0, 45, 570, 380);
          { tab_radiogram_message = new Fl_Group(0, 70, 570, 355, _("Message"));
            tab_radiogram_message->hide();
            { txt_rg_nbr = new Fl_Input2(36, 96, 50, 24, _("*NR"));
              txt_rg_nbr->tooltip(_("Message number at station of origin"));
              txt_rg_nbr->box(FL_DOWN_BOX);
              txt_rg_nbr->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_nbr->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_nbr->labeltype(FL_NORMAL_LABEL);
              txt_rg_nbr->labelfont(0);
              txt_rg_nbr->labelsize(14);
              txt_rg_nbr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_nbr->callback((Fl_Callback*)cb_txt_rg_nbr);
              txt_rg_nbr->align(FL_ALIGN_TOP);
              txt_rg_nbr->when(FL_WHEN_CHANGED);
            } // Fl_Input2* txt_rg_nbr
            { sel_rg_prec = new Fl_Choice(88, 96, 120, 24, _("*PREC"));
              sel_rg_prec->tooltip(_("Message Precedence"));
              sel_rg_prec->down_box(FL_BORDER_BOX);
              sel_rg_prec->align(FL_ALIGN_TOP);
            } // Fl_Choice* sel_rg_prec
            { txt_rg_hx = new Fl_Input2(210, 96, 95, 24, _("HX__"));
              txt_rg_hx->tooltip(_("Handling instructions"));
              txt_rg_hx->box(FL_DOWN_BOX);
              txt_rg_hx->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_hx->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_hx->labeltype(FL_NORMAL_LABEL);
              txt_rg_hx->labelfont(0);
              txt_rg_hx->labelsize(14);
              txt_rg_hx->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_hx->align(FL_ALIGN_TOP);
              txt_rg_hx->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_hx
            { btn_rg_hx = new Fl_Button(308, 96, 24, 24, _("hx"));
              btn_rg_hx->tooltip(_("Open HX dialog"));
              btn_rg_hx->callback((Fl_Callback*)cb_btn_rg_hx);
            } // Fl_Button* btn_rg_hx
            { txt_rg_station = new Fl_Input2(336, 96, 101, 24, _("*STN ORIG"));
              txt_rg_station->tooltip(_("Station call sign"));
              txt_rg_station->box(FL_DOWN_BOX);
              txt_rg_station->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_station->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_station->labeltype(FL_NORMAL_LABEL);
              txt_rg_station->labelfont(0);
              txt_rg_station->labelsize(14);
              txt_rg_station->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_station->callback((Fl_Callback*)cb_txt_rg_station);
              txt_rg_station->align(FL_ALIGN_TOP);
              txt_rg_station->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_station
            { txt_rg_place = new Fl_Input2(6, 137, 266, 24, _("PLACE OF ORIG"));
              txt_rg_place->tooltip(_("Place of origin"));
              txt_rg_place->box(FL_DOWN_BOX);
              txt_rg_place->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_place->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_place->labeltype(FL_NORMAL_LABEL);
              txt_rg_place->labelfont(0);
              txt_rg_place->labelsize(14);
              txt_rg_place->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_place->callback((Fl_Callback*)cb_txt_rg_place);
              txt_rg_place->align(FL_ALIGN_TOP_LEFT);
              txt_rg_place->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_place
            { txt_rg_t1 = new Fl_Input2(288, 137, 81, 24, _("TIME FILED"));
              txt_rg_t1->tooltip(_("Time of origination"));
              txt_rg_t1->box(FL_DOWN_BOX);
              txt_rg_t1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_t1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_t1->labeltype(FL_NORMAL_LABEL);
              txt_rg_t1->labelfont(0);
              txt_rg_t1->labelsize(14);
              txt_rg_t1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_t1->align(FL_ALIGN_TOP_LEFT);
              txt_rg_t1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_t1
            { btn_rgTime1 = new Fl_Button(372, 137, 24, 24, _("..."));
              btn_rgTime1->tooltip(_("Set time now"));
              btn_rgTime1->callback((Fl_Callback*)cb_btn_rgTime1);
            } // Fl_Button* btn_rgTime1
            { txt_rg_d1 = new Fl_Input2(416, 137, 123, 24, _("*MON DY"));
              txt_rg_d1->tooltip(_("Date of origination"));
              txt_rg_d1->box(FL_DOWN_BOX);
              txt_rg_d1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_d1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_d1->labeltype(FL_NORMAL_LABEL);
              txt_rg_d1->labelfont(0);
              txt_rg_d1->labelsize(14);
              txt_rg_d1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_d1->align(FL_ALIGN_TOP_LEFT);
              txt_rg_d1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_d1
            { btn_rgDate1 = new Fl_Button(541, 137, 24, 24, _("..."));
              btn_rgDate1->tooltip(_("Set today"));
              btn_rgDate1->callback((Fl_Callback*)cb_btn_rgDate1);
            } // Fl_Button* btn_rgDate1
            { txt_rg_to = new Fl_Input2(6, 179, 277, 70, _("*TO"));
              txt_rg_to->tooltip(_("Addressee"));
              txt_rg_to->type(4);
              txt_rg_to->box(FL_DOWN_BOX);
              txt_rg_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_to->labeltype(FL_NORMAL_LABEL);
              txt_rg_to->labelfont(0);
              txt_rg_to->labelsize(14);
              txt_rg_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_to->callback((Fl_Callback*)cb_txt_rg_to);
              txt_rg_to->align(FL_ALIGN_TOP_LEFT);
              txt_rg_to->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_to
            { txt_rg_phone = new Fl_Input2(327, 176, 238, 24, _("TEL:"));
              txt_rg_phone->tooltip(_("Addressee telephone number"));
              txt_rg_phone->box(FL_DOWN_BOX);
              txt_rg_phone->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_phone->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_phone->labeltype(FL_NORMAL_LABEL);
              txt_rg_phone->labelfont(0);
              txt_rg_phone->labelsize(14);
              txt_rg_phone->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_phone->callback((Fl_Callback*)cb_txt_rg_phone);
              txt_rg_phone->align(FL_ALIGN_LEFT);
              txt_rg_phone->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_phone
            { txt_rg_opnote = new Fl_Input2(360, 203, 205, 24, _("OP NOTE:"));
              txt_rg_opnote->tooltip(_("Operating notes"));
              txt_rg_opnote->box(FL_DOWN_BOX);
              txt_rg_opnote->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_opnote->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_opnote->labeltype(FL_NORMAL_LABEL);
              txt_rg_opnote->labelfont(0);
              txt_rg_opnote->labelsize(14);
              txt_rg_opnote->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_opnote->callback((Fl_Callback*)cb_txt_rg_opnote);
              txt_rg_opnote->align(FL_ALIGN_LEFT);
              txt_rg_opnote->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_opnote
            { txt_rg_msg = new FTextEdit(4, 271, 562, 119, _("TXT:"));
              txt_rg_msg->tooltip(_("Message contents - recommend limit to 25 words or less"));
              txt_rg_msg->box(FL_DOWN_BOX);
              txt_rg_msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_msg->labeltype(FL_NORMAL_LABEL);
              txt_rg_msg->labelfont(0);
              txt_rg_msg->labelsize(14);
              txt_rg_msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_msg->callback((Fl_Callback*)cb_txt_rg_msg);
              txt_rg_msg->align(FL_ALIGN_TOP_LEFT);
              txt_rg_msg->when(FL_WHEN_CHANGED);
            } // FTextEdit* txt_rg_msg
            { btn_arl = new Fl_Button(489, 238, 76, 24, _("ARL MSG"));
              btn_arl->tooltip(_("ARL message selector"));
              btn_arl->callback((Fl_Callback*)cb_btn_arl);
            } // Fl_Button* btn_arl
            { txt_rg_check = new Fl_Input2(439, 96, 101, 24, _("CK"));
              txt_rg_check->tooltip(_("Message check count"));
              txt_rg_check->box(FL_DOWN_BOX);
              txt_rg_check->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_check->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_check->labeltype(FL_NORMAL_LABEL);
              txt_rg_check->labelfont(0);
              txt_rg_check->labelsize(14);
              txt_rg_check->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_check->align(FL_ALIGN_TOP);
              txt_rg_check->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_check
            { btn_rg_check = new Fl_Button(541, 96, 24, 24, _("ck"));
              btn_rg_check->tooltip(_("Compute check count"));
              btn_rg_check->callback((Fl_Callback*)cb_btn_rg_check);
            } // Fl_Button* btn_rg_check
            { txt_rg_sig = new Fl_Input2(48, 396, 238, 24, _("SIG:"));
              txt_rg_sig->tooltip(_("Addressee telephone number"));
              txt_rg_sig->box(FL_DOWN_BOX);
              txt_rg_sig->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_sig->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_sig->labeltype(FL_NORMAL_LABEL);
              txt_rg_sig->labelfont(0);
              txt_rg_sig->labelsize(14);
              txt_rg_sig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_sig->callback((Fl_Callback*)cb_txt_rg_sig);
              txt_rg_sig->align(FL_ALIGN_LEFT);
              txt_rg_sig->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_sig
            { txt_rg_opnote2 = new Fl_Input2(364, 396, 201, 24, _("OP NOTE:"));
              txt_rg_opnote2->tooltip(_("Operating notes"));
              txt_rg_opnote2->box(FL_DOWN_BOX);
              txt_rg_opnote2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_opnote2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_opnote2->labeltype(FL_NORMAL_LABEL);
              txt_rg_opnote2->labelfont(0);
              txt_rg_opnote2->labelsize(14);
              txt_rg_opnote2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_opnote2->callback((Fl_Callback*)cb_txt_rg_opnote2);
              txt_rg_opnote2->align(FL_ALIGN_LEFT);
              txt_rg_opnote2->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_opnote2
            { btn_rg_svc = new Fl_Check_Button(12, 100, 17, 15, _("SVC"));
              btn_rg_svc->tooltip(_("Check for Service Message"));
              btn_rg_svc->down_box(FL_DOWN_BOX);
              btn_rg_svc->align(FL_ALIGN_TOP);
            } // Fl_Check_Button* btn_rg_svc
            tab_radiogram_message->end();
          } // Fl_Group* tab_radiogram_message
          { tab_radiogram_information = new Fl_Group(0, 70, 570, 355, _("Records"));
            { Fl_Group* o = new Fl_Group(5, 113, 560, 140, _("ORIG - FM - DATE/TIME"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { txt_rg_orig = new Fl_Input2(10, 148, 550, 100, _("Name/Addr/City/Tel"));
                txt_rg_orig->tooltip(_("Person requesting message"));
                txt_rg_orig->type(4);
                txt_rg_orig->box(FL_DOWN_BOX);
                txt_rg_orig->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_orig->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_orig->labeltype(FL_NORMAL_LABEL);
                txt_rg_orig->labelfont(0);
                txt_rg_orig->labelsize(14);
                txt_rg_orig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_orig->align(FL_ALIGN_TOP_LEFT);
                txt_rg_orig->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_orig
              { txt_rg_dt2 = new Fl_Input2(381, 119, 152, 24, _("DT/TM"));
                txt_rg_dt2->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt2->box(FL_DOWN_BOX);
                txt_rg_dt2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt2->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt2->labelfont(0);
                txt_rg_dt2->labelsize(14);
                txt_rg_dt2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt2->align(FL_ALIGN_LEFT);
                txt_rg_dt2->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt2
              { btn_rgDateTime2 = new Fl_Button(536, 119, 24, 24, _("..."));
                btn_rgDateTime2->tooltip(_("Set today"));
                btn_rgDateTime2->callback((Fl_Callback*)cb_btn_rgDateTime2);
              } // Fl_Button* btn_rgDateTime2
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 284, 560, 140, _("DLVD -TO - DATE/TIME"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { txt_rg_dt3 = new Fl_Input2(381, 290, 152, 24, _("DT/TM"));
                txt_rg_dt3->tooltip(_("ddhhmm MMM YY of deliver"));
                txt_rg_dt3->box(FL_DOWN_BOX);
                txt_rg_dt3->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt3->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt3->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt3->labelfont(0);
                txt_rg_dt3->labelsize(14);
                txt_rg_dt3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt3->align(FL_ALIGN_LEFT);
                txt_rg_dt3->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt3
              { btn_rgDateTime3 = new Fl_Button(537, 290, 24, 24, _("..."));
                btn_rgDateTime3->tooltip(_("Set to today"));
                btn_rgDateTime3->callback((Fl_Callback*)cb_btn_rgDateTime3);
              } // Fl_Button* btn_rgDateTime3
              { txt_rg_dlvd_to = new Fl_Input2(10, 319, 550, 100, _("Name/Addr/City/Tel"));
                txt_rg_dlvd_to->tooltip(_("Message sent to"));
                txt_rg_dlvd_to->type(4);
                txt_rg_dlvd_to->box(FL_DOWN_BOX);
                txt_rg_dlvd_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dlvd_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dlvd_to->labeltype(FL_NORMAL_LABEL);
                txt_rg_dlvd_to->labelfont(0);
                txt_rg_dlvd_to->labelsize(14);
                txt_rg_dlvd_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dlvd_to->align(FL_ALIGN_TOP_LEFT);
                txt_rg_dlvd_to->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dlvd_to
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 82, 560, 30);
              o->box(FL_ENGRAVED_FRAME);
              { txt_rg_rcv_fm = new Fl_Input2(82, 85, 100, 24, _("RCVD FM:"));
                txt_rg_rcv_fm->tooltip(_("Call sign of sender"));
                txt_rg_rcv_fm->box(FL_DOWN_BOX);
                txt_rg_rcv_fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_rcv_fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_rcv_fm->labeltype(FL_NORMAL_LABEL);
                txt_rg_rcv_fm->labelfont(0);
                txt_rg_rcv_fm->labelsize(14);
                txt_rg_rcv_fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_rcv_fm->align(FL_ALIGN_LEFT);
                txt_rg_rcv_fm->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_rcv_fm
              { txt_rg_rcv_net = new Fl_Input2(221, 85, 100, 24, _("NET:"));
                txt_rg_rcv_net->tooltip(_("Net rcvd from"));
                txt_rg_rcv_net->box(FL_DOWN_BOX);
                txt_rg_rcv_net->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_rcv_net->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_rcv_net->labeltype(FL_NORMAL_LABEL);
                txt_rg_rcv_net->labelfont(0);
                txt_rg_rcv_net->labelsize(14);
                txt_rg_rcv_net->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_rcv_net->align(FL_ALIGN_LEFT);
                txt_rg_rcv_net->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_rcv_net
              { txt_rg_dt4 = new Fl_Input2(381, 85, 152, 24, _("DT/TM"));
                txt_rg_dt4->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt4->box(FL_DOWN_BOX);
                txt_rg_dt4->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt4->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt4->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt4->labelfont(0);
                txt_rg_dt4->labelsize(14);
                txt_rg_dt4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt4->align(FL_ALIGN_LEFT);
                txt_rg_dt4->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt4
              { btn_rgDateTime4 = new Fl_Button(536, 85, 24, 24, _("..."));
                btn_rgDateTime4->tooltip(_("Set today"));
                btn_rgDateTime4->callback((Fl_Callback*)cb_btn_rgDateTime4);
              } // Fl_Button* btn_rgDateTime4
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 253, 560, 30);
              o->box(FL_ENGRAVED_FRAME);
              { txt_rg_sent_to = new Fl_Input2(82, 256, 100, 24, _("SENT TO:"));
                txt_rg_sent_to->tooltip(_("Sent to call sign"));
                txt_rg_sent_to->box(FL_DOWN_BOX);
                txt_rg_sent_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_sent_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_sent_to->labeltype(FL_NORMAL_LABEL);
                txt_rg_sent_to->labelfont(0);
                txt_rg_sent_to->labelsize(14);
                txt_rg_sent_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_sent_to->align(FL_ALIGN_LEFT);
                txt_rg_sent_to->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_sent_to
              { txt_rg_snt_net = new Fl_Input2(221, 256, 100, 24, _("NET:"));
                txt_rg_snt_net->tooltip(_("Sent via net"));
                txt_rg_snt_net->box(FL_DOWN_BOX);
                txt_rg_snt_net->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_snt_net->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_snt_net->labeltype(FL_NORMAL_LABEL);
                txt_rg_snt_net->labelfont(0);
                txt_rg_snt_net->labelsize(14);
                txt_rg_snt_net->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_snt_net->align(FL_ALIGN_LEFT);
                txt_rg_snt_net->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_snt_net
              { txt_rg_dt5 = new Fl_Input2(381, 256, 152, 24, _("DT/TM"));
                txt_rg_dt5->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt5->box(FL_DOWN_BOX);
                txt_rg_dt5->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt5->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt5->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt5->labelfont(0);
                txt_rg_dt5->labelsize(14);
                txt_rg_dt5->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt5->align(FL_ALIGN_LEFT);
                txt_rg_dt5->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt5
              { btn_rgDateTime5 = new Fl_Button(536, 256, 24, 24, _("..."));
                btn_rgDateTime5->tooltip(_("Set today"));
                btn_rgDateTime5->callback((Fl_Callback*)cb_btn_rgDateTime5);
              } // Fl_Button* btn_rgDateTime5
              o->end();
            } // Fl_Group* o
            tab_radiogram_information->end();
            Fl_Group::current()->resizable(tab_radiogram_information);
          } // Fl_Group* tab_radiogram_information
          tabs_radiogram->end();
          Fl_Group::current()->resizable(tabs_radiogram);
        } // Fl_Tabs* tabs_radiogram
        tab_radiogram->end();
      } // Fl_Group* tab_radiogram
      { tab_plaintext = new Fl_Group(2, 45, 573, 380, _("Generic"));
        tab_plaintext->hide();
        { txt_pt_title = new Fl_Input2(41, 53, 525, 24, _("Title"));
          txt_pt_title->tooltip(_("Addressee"));
          txt_pt_title->box(FL_DOWN_BOX);
          txt_pt_title->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_title->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_title->labeltype(FL_NORMAL_LABEL);
          txt_pt_title->labelfont(0);
          txt_pt_title->labelsize(14);
          txt_pt_title->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_title->align(FL_ALIGN_LEFT);
          txt_pt_title->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_pt_title
        { txt_pt_to = new Fl_Input2(42, 80, 320, 24, _("To"));
          txt_pt_to->tooltip(_("Addressee"));
          txt_pt_to->box(FL_DOWN_BOX);
          txt_pt_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_to->labeltype(FL_NORMAL_LABEL);
          txt_pt_to->labelfont(0);
          txt_pt_to->labelsize(14);
          txt_pt_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_to->align(FL_ALIGN_LEFT);
          txt_pt_to->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_pt_to
        { txt_pt_fm = new Fl_Input2(42, 107, 320, 24, _("Fm"));
          txt_pt_fm->tooltip(_("Originator"));
          txt_pt_fm->box(FL_DOWN_BOX);
          txt_pt_fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_fm->labeltype(FL_NORMAL_LABEL);
          txt_pt_fm->labelfont(0);
          txt_pt_fm->labelsize(14);
          txt_pt_fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_fm->align(FL_ALIGN_LEFT);
          txt_pt_fm->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_pt_fm
        { txt_pt_subj = new Fl_Input2(42, 135, 525, 24, _("Sub."));
          txt_pt_subj->tooltip(_("Subject"));
          txt_pt_subj->box(FL_DOWN_BOX);
          txt_pt_subj->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_subj->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_subj->labeltype(FL_NORMAL_LABEL);
          txt_pt_subj->labelfont(0);
          txt_pt_subj->labelsize(14);
          txt_pt_subj->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_subj->align(FL_ALIGN_LEFT);
          txt_pt_subj->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_pt_subj
        { txt_pt_msg = new FTextEdit(4, 177, 562, 245, _("Message:"));
          txt_pt_msg->box(FL_DOWN_FRAME);
          txt_pt_msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_msg->labeltype(FL_NORMAL_LABEL);
          txt_pt_msg->labelfont(0);
          txt_pt_msg->labelsize(14);
          txt_pt_msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_msg->align(FL_ALIGN_TOP_LEFT);
          txt_pt_msg->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(txt_pt_msg);
        } // FTextEdit* txt_pt_msg
        { Fl_DateInput* o = txt_pt_date = new Fl_DateInput(404, 81, 125, 24, _("Date"));
          txt_pt_date->tooltip(_("Date of origination"));
          txt_pt_date->box(FL_DOWN_BOX);
          txt_pt_date->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_date->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_date->labeltype(FL_NORMAL_LABEL);
          txt_pt_date->labelfont(0);
          txt_pt_date->labelsize(14);
          txt_pt_date->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_date->align(FL_ALIGN_LEFT);
          txt_pt_date->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* txt_pt_date
        { btn_pt_date = new Fl_Button(537, 83, 20, 20, _("..."));
          btn_pt_date->tooltip(_("Set today"));
          btn_pt_date->callback((Fl_Callback*)cb_btn_pt_date);
        } // Fl_Button* btn_pt_date
        { txt_pt_time = new Fl_Input2(404, 107, 125, 24, _("Time"));
          txt_pt_time->tooltip(_("Time of origination"));
          txt_pt_time->box(FL_DOWN_BOX);
          txt_pt_time->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_pt_time->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_pt_time->labeltype(FL_NORMAL_LABEL);
          txt_pt_time->labelfont(0);
          txt_pt_time->labelsize(14);
          txt_pt_time->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_pt_time->align(FL_ALIGN_LEFT);
          txt_pt_time->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_pt_time
        { btn_pt_time = new Fl_Button(537, 109, 20, 20, _("..."));
          btn_pt_time->tooltip(_("Set time now"));
          btn_pt_time->callback((Fl_Callback*)cb_btn_pt_time);
        } // Fl_Button* btn_pt_time
        tab_plaintext->end();
      } // Fl_Group* tab_plaintext
      { tab_blank = new Fl_Group(2, 45, 573, 380, _("Blank"));
        tab_blank->hide();
        { txt_blank_msg = new FTextEdit(4, 50, 562, 370);
          txt_blank_msg->box(FL_DOWN_FRAME);
          txt_blank_msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_blank_msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_blank_msg->labeltype(FL_NORMAL_LABEL);
          txt_blank_msg->labelfont(0);
          txt_blank_msg->labelsize(14);
          txt_blank_msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_blank_msg->align(FL_ALIGN_TOP_LEFT);
          txt_blank_msg->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(txt_blank_msg);
        } // FTextEdit* txt_blank_msg
        tab_blank->end();
      } // Fl_Group* tab_blank
      tabs_msg_type->end();
    } // Fl_Tabs* tabs_msg_type
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *brwsOptions=(Fl_Browser *)0;

Fl_Return_Button *btnCloseOptions=(Fl_Return_Button *)0;

static void cb_btnCloseOptions(Fl_Return_Button*, void*) {
  closeoptions();
}

Fl_Double_Window* optionsdialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(410, 260, _("Command Line Options"));
    w = o;
    { brwsOptions = new Fl_Browser(3, 31, 405, 202);
    } // Fl_Browser* brwsOptions
    { btnCloseOptions = new Fl_Return_Button(329, 239, 72, 20, _("OK"));
      btnCloseOptions->callback((Fl_Callback*)cb_btnCloseOptions);
    } // Fl_Return_Button* btnCloseOptions
    { Fl_Box* o = new Fl_Box(4, 7, 401, 21, _("usage: flics -<option> [filename]"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)FL_LIGHT3);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *select_arl=(Fl_Browser *)0;

static void cb_select_arl(Fl_Browser* o, void*) {
  arl_nbr = o->value()- 1;
arl_text->clear();
arl_text->addstr(arl_list[arl_nbr].text);
txt_arl_fill1->value("");
txt_arl_fill1->deactivate();
txt_arl_fill2->value("");
txt_arl_fill2->deactivate();
txt_arl_fill3->value("");
txt_arl_fill3->deactivate();
txt_arl_fill4->value("");
txt_arl_fill4->deactivate();
if (arl_list[arl_nbr].nfills > 0) txt_arl_fill1->activate();
if (arl_list[arl_nbr].nfills > 1) txt_arl_fill2->activate();
if (arl_list[arl_nbr].nfills > 2) txt_arl_fill3->activate();
if (arl_list[arl_nbr].nfills > 3) txt_arl_fill4->activate();
}

Fl_Input *txt_arl_fill1=(Fl_Input *)0;

Fl_Input *txt_arl_fill2=(Fl_Input *)0;

Fl_Input *txt_arl_fill3=(Fl_Input *)0;

Fl_Input *txt_arl_fill4=(Fl_Input *)0;

Fl_Button *btn_arl_cancel=(Fl_Button *)0;

static void cb_btn_arl_cancel(Fl_Button*, void*) {
  cb_arl_cancel();
}

Fl_Button *btn_arl_add=(Fl_Button *)0;

static void cb_btn_arl_add(Fl_Button*, void*) {
  cb_arl_add();
}

FTextEdit *arl_text=(FTextEdit *)0;

Fl_Check_Button *btnInsertX=(Fl_Check_Button *)0;

static void cb_btnInsertX(Fl_Check_Button* o, void*) {
  progStatus.insert_x = o->value();
}

Fl_Double_Window* arl_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(521, 261, _("ARL Message Selector"));
    w = o;
    { select_arl = new Fl_Browser(6, 21, 161, 107, _("ARL #"));
      select_arl->type(2);
      select_arl->callback((Fl_Callback*)cb_select_arl);
      select_arl->align(FL_ALIGN_TOP);
    } // Fl_Browser* select_arl
    { txt_arl_fill1 = new Fl_Input(48, 131, 465, 22, _("fill 1:"));
    } // Fl_Input* txt_arl_fill1
    { txt_arl_fill2 = new Fl_Input(48, 155, 465, 22, _("fill 2:"));
    } // Fl_Input* txt_arl_fill2
    { txt_arl_fill3 = new Fl_Input(48, 179, 465, 22, _("fill 3:"));
    } // Fl_Input* txt_arl_fill3
    { txt_arl_fill4 = new Fl_Input(48, 204, 465, 22, _("fill 4:"));
    } // Fl_Input* txt_arl_fill4
    { btn_arl_cancel = new Fl_Button(362, 232, 70, 20, _("Cancel"));
      btn_arl_cancel->callback((Fl_Callback*)cb_btn_arl_cancel);
    } // Fl_Button* btn_arl_cancel
    { btn_arl_add = new Fl_Button(440, 232, 70, 20, _("Add"));
      btn_arl_add->callback((Fl_Callback*)cb_btn_arl_add);
    } // Fl_Button* btn_arl_add
    { arl_text = new FTextEdit(169, 21, 345, 107, _("Message:"));
      arl_text->tooltip(_("Message contents - recommend limit to 25 words or less"));
      arl_text->box(FL_DOWN_BOX);
      arl_text->color((Fl_Color)FL_LIGHT3);
      arl_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
      arl_text->labeltype(FL_NORMAL_LABEL);
      arl_text->labelfont(0);
      arl_text->labelsize(14);
      arl_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      arl_text->align(FL_ALIGN_TOP_LEFT);
      arl_text->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(arl_text);
    } // FTextEdit* arl_text
    { Fl_Check_Button* o = btnInsertX = new Fl_Check_Button(18, 234, 201, 15, _("Insert \"X\" between fields"));
      btnInsertX->down_box(FL_DOWN_BOX);
      btnInsertX->callback((Fl_Callback*)cb_btnInsertX);
      o->value(progStatus.insert_x);
    } // Fl_Check_Button* btnInsertX
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Round_Button *btn_dtformat0=(Fl_Round_Button *)0;

static void cb_btn_dtformat0(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 0;
btn_dtformat1->value(0);
btn_dtformat2->value(0);
};
}

Fl_Round_Button *btn_dtformat1=(Fl_Round_Button *)0;

static void cb_btn_dtformat1(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 1;
btn_dtformat0->value(0);
btn_dtformat2->value(0);
};
}

Fl_Round_Button *btn_dtformat2=(Fl_Round_Button *)0;

static void cb_btn_dtformat2(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 2;
btn_dtformat1->value(0);
btn_dtformat0->value(0);
};
}

Fl_Round_Button *btn_utc_format0=(Fl_Round_Button *)0;

static void cb_btn_utc_format0(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 0;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format1=(Fl_Round_Button *)0;

static void cb_btn_utc_format1(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 1;
btn_utc_format0->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format2=(Fl_Round_Button *)0;

static void cb_btn_utc_format2(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 2;
btn_utc_format1->value(0);
btn_utc_format0->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format3=(Fl_Round_Button *)0;

static void cb_btn_utc_format3(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 3;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format0->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format4=(Fl_Round_Button *)0;

static void cb_btn_utc_format4(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 4;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format0->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format5=(Fl_Round_Button *)0;

static void cb_btn_utc_format5(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 5;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format0->value(0);
};
}

Fl_Button *btn_close_config=(Fl_Button *)0;

static void cb_btn_close_config(Fl_Button*, void*) {
  cb_close_config();
}

Fl_Input *txt_my_call=(Fl_Input *)0;

static void cb_txt_my_call(Fl_Input* o, void*) {
  progStatus.my_call = o->value();
}

Fl_Input *txt_my_tel=(Fl_Input *)0;

static void cb_txt_my_tel(Fl_Input* o, void*) {
  progStatus.my_tel = o->value();
}

Fl_Input *txt_my_name=(Fl_Input *)0;

static void cb_txt_my_name(Fl_Input* o, void*) {
  progStatus.my_name = o->value();
}

Fl_Input *txt_my_addr=(Fl_Input *)0;

static void cb_txt_my_addr(Fl_Input* o, void*) {
  progStatus.my_addr = o->value();
}

Fl_Input *txt_my_city=(Fl_Input *)0;

static void cb_txt_my_city(Fl_Input* o, void*) {
  progStatus.my_city = o->value();
}

Fl_Spinner *cnt_wpl=(Fl_Spinner *)0;

static void cb_cnt_wpl(Fl_Spinner* o, void*) {
  progStatus.wpl = (int)o->value();
}

Fl_Check_Button *btn_compress=(Fl_Check_Button *)0;

static void cb_btn_compress(Fl_Check_Button* o, void*) {
  progStatus.compression = o->value();
}

Fl_Check_Button *btn_call_fname=(Fl_Check_Button *)0;

static void cb_btn_call_fname(Fl_Check_Button* o, void*) {
  progStatus.call_fname = o->value();
}

Fl_Check_Button *btn_dt_fname=(Fl_Check_Button *)0;

static void cb_btn_dt_fname(Fl_Check_Button* o, void*) {
  progStatus.dt_fname = o->value();
}

Fl_Check_Button *btn_sernbr_fname=(Fl_Check_Button *)0;

static void cb_btn_sernbr_fname(Fl_Check_Button* o, void*) {
  progStatus.sernbr_fname = o->value();
}

Fl_Input *txt_sernbr=(Fl_Input *)0;

static void cb_txt_sernbr(Fl_Input* o, void*) {
  progStatus.sernbr = o->value();
}

Fl_Double_Window* config_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(567, 239, _("flmsg configure"));
    w = o;
    { Fl_Group* o = new Fl_Group(4, 7, 135, 81, _("Date"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = btn_dtformat0 = new Fl_Round_Button(13, 27, 70, 15, _("YYYY-DD-MM"));
        btn_dtformat0->down_box(FL_ROUND_DOWN_BOX);
        btn_dtformat0->callback((Fl_Callback*)cb_btn_dtformat0);
        if (progStatus.dtformat == 0) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_dtformat0
      { Fl_Round_Button* o = btn_dtformat1 = new Fl_Round_Button(13, 47, 70, 15, _("MM/DD/YY"));
        btn_dtformat1->down_box(FL_ROUND_DOWN_BOX);
        btn_dtformat1->callback((Fl_Callback*)cb_btn_dtformat1);
        if (progStatus.dtformat == 1) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_dtformat1
      { Fl_Round_Button* o = btn_dtformat2 = new Fl_Round_Button(13, 67, 70, 15, _("DD/MM/YY"));
        btn_dtformat2->down_box(FL_ROUND_DOWN_BOX);
        btn_dtformat2->callback((Fl_Callback*)cb_btn_dtformat2);
        if (progStatus.dtformat == 2) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_dtformat2
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(4, 89, 135, 146, _("Time"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = btn_utc_format0 = new Fl_Round_Button(11, 107, 70, 15, _("hhmmL"));
        btn_utc_format0->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format0->callback((Fl_Callback*)cb_btn_utc_format0);
        if (progStatus.UTC == 0) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format0
      { Fl_Round_Button* o = btn_utc_format1 = new Fl_Round_Button(11, 128, 70, 15, _("hh:mmL"));
        btn_utc_format1->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format1->callback((Fl_Callback*)cb_btn_utc_format1);
        if (progStatus.UTC == 1) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format1
      { Fl_Round_Button* o = btn_utc_format2 = new Fl_Round_Button(11, 150, 70, 15, _("hhmmZ"));
        btn_utc_format2->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format2->callback((Fl_Callback*)cb_btn_utc_format2);
        if (progStatus.UTC == 2) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format2
      { Fl_Round_Button* o = btn_utc_format3 = new Fl_Round_Button(11, 172, 70, 15, _("hh:mmZ"));
        btn_utc_format3->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format3->callback((Fl_Callback*)cb_btn_utc_format3);
        if (progStatus.UTC == 3) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format3
      { Fl_Round_Button* o = btn_utc_format4 = new Fl_Round_Button(11, 194, 70, 15, _("hhmm UTC"));
        btn_utc_format4->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format4->callback((Fl_Callback*)cb_btn_utc_format4);
        if (progStatus.UTC == 4) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format4
      { Fl_Round_Button* o = btn_utc_format5 = new Fl_Round_Button(11, 216, 70, 15, _("hh:mm UTC"));
        btn_utc_format5->down_box(FL_ROUND_DOWN_BOX);
        btn_utc_format5->callback((Fl_Callback*)cb_btn_utc_format5);
        if (progStatus.UTC == 5) o->value(1); else o->value(0);
      } // Fl_Round_Button* btn_utc_format5
      o->end();
    } // Fl_Group* o
    { btn_close_config = new Fl_Button(467, 201, 73, 25, _("close"));
      btn_close_config->callback((Fl_Callback*)cb_btn_close_config);
    } // Fl_Button* btn_close_config
    { Fl_Group* o = new Fl_Group(140, 7, 300, 185, _("Radiogram format"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Input* o = txt_my_call = new Fl_Input(194, 32, 77, 24, _("Call:"));
        txt_my_call->callback((Fl_Callback*)cb_txt_my_call);
        o->value(progStatus.my_call.c_str());
      } // Fl_Input* txt_my_call
      { Fl_Input* o = txt_my_tel = new Fl_Input(303, 32, 130, 24, _("Tel:"));
        txt_my_tel->callback((Fl_Callback*)cb_txt_my_tel);
        o->value(progStatus.my_tel.c_str());
      } // Fl_Input* txt_my_tel
      { Fl_Input* o = txt_my_name = new Fl_Input(198, 64, 235, 24, _("Name:"));
        txt_my_name->callback((Fl_Callback*)cb_txt_my_name);
        o->value(progStatus.my_name.c_str());
      } // Fl_Input* txt_my_name
      { Fl_Input* o = txt_my_addr = new Fl_Input(198, 96, 235, 24, _("Addr:"));
        txt_my_addr->callback((Fl_Callback*)cb_txt_my_addr);
        o->value(progStatus.my_addr.c_str());
      } // Fl_Input* txt_my_addr
      { Fl_Input* o = txt_my_city = new Fl_Input(233, 128, 200, 24, _("City/St/Zip:"));
        txt_my_city->callback((Fl_Callback*)cb_txt_my_city);
        o->value(progStatus.my_city.c_str());
      } // Fl_Input* txt_my_city
      { Fl_Spinner* o = cnt_wpl = new Fl_Spinner(150, 160, 40, 24, _("message words/line"));
        cnt_wpl->tooltip(_("Radiogram message contents auto format"));
        cnt_wpl->minimum(4);
        cnt_wpl->maximum(10);
        cnt_wpl->value(5);
        cnt_wpl->callback((Fl_Callback*)cb_cnt_wpl);
        cnt_wpl->align(FL_ALIGN_RIGHT);
        o->value(progStatus.wpl);
      } // Fl_Spinner* cnt_wpl
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(140, 194, 300, 40, _("Wrap"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Check_Button* o = btn_compress = new Fl_Check_Button(191, 209, 70, 15, _("Use compression"));
        btn_compress->tooltip(_("Compress wrap files"));
        btn_compress->down_box(FL_DOWN_BOX);
        btn_compress->callback((Fl_Callback*)cb_btn_compress);
        o->value(progStatus.compression);
      } // Fl_Check_Button* btn_compress
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(442, 7, 121, 185, _("Naming Files"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Check_Button* o = btn_call_fname = new Fl_Check_Button(467, 32, 70, 15, _("Callsign"));
        btn_call_fname->down_box(FL_DOWN_BOX);
        btn_call_fname->callback((Fl_Callback*)cb_btn_call_fname);
        o->value(progStatus.call_fname);
      } // Fl_Check_Button* btn_call_fname
      { Fl_Check_Button* o = btn_dt_fname = new Fl_Check_Button(467, 61, 70, 15, _("Date-time"));
        btn_dt_fname->down_box(FL_DOWN_BOX);
        btn_dt_fname->callback((Fl_Callback*)cb_btn_dt_fname);
        o->value(progStatus.dt_fname);
      } // Fl_Check_Button* btn_dt_fname
      { Fl_Check_Button* o = btn_sernbr_fname = new Fl_Check_Button(467, 91, 70, 15, _("Serial #"));
        btn_sernbr_fname->down_box(FL_DOWN_BOX);
        btn_sernbr_fname->callback((Fl_Callback*)cb_btn_sernbr_fname);
        o->value(progStatus.sernbr_fname);
      } // Fl_Check_Button* btn_sernbr_fname
      { Fl_Input* o = txt_sernbr = new Fl_Input(467, 128, 66, 24, _("Next #"));
        txt_sernbr->type(2);
        txt_sernbr->callback((Fl_Callback*)cb_txt_sernbr);
        txt_sernbr->align(FL_ALIGN_TOP_LEFT);
        o->value(progStatus.sernbr.c_str());
      } // Fl_Input* txt_sernbr
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Choice *sel_hx_select=(Fl_Choice *)0;

static void cb_sel_hx_select(Fl_Choice*, void*) {
  cb_hx_select();
}

Fl_Button *btn_hx_select_add=(Fl_Button *)0;

static void cb_btn_hx_select_add(Fl_Button*, void*) {
  cb_hx_select_add();
}

Fl_Input2 *txt_hx_select_text=(Fl_Input2 *)0;

Fl_Button *btn_hx_select_cancel=(Fl_Button *)0;

static void cb_btn_hx_select_cancel(Fl_Button*, void*) {
  cb_hx_select_cancel();
}

Fl_Return_Button *btn_hx_select_ok=(Fl_Return_Button *)0;

static void cb_btn_hx_select_ok(Fl_Return_Button*, void*) {
  cb_hx_select_ok();
}

Fl_Output *txt_hx_instructions=(Fl_Output *)0;

Fl_Double_Window* hx_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(359, 121, _("Optional Handling"));
    w = o;
    { sel_hx_select = new Fl_Choice(3, 20, 68, 24, _("HX__:"));
      sel_hx_select->down_box(FL_BORDER_BOX);
      sel_hx_select->callback((Fl_Callback*)cb_sel_hx_select);
      sel_hx_select->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Choice* sel_hx_select
    { btn_hx_select_add = new Fl_Button(73, 20, 30, 24, _("=>"));
      btn_hx_select_add->callback((Fl_Callback*)cb_btn_hx_select_add);
    } // Fl_Button* btn_hx_select_add
    { txt_hx_select_text = new Fl_Input2(105, 20, 121, 24, _("HX text"));
      txt_hx_select_text->box(FL_DOWN_BOX);
      txt_hx_select_text->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_hx_select_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_hx_select_text->labeltype(FL_NORMAL_LABEL);
      txt_hx_select_text->labelfont(0);
      txt_hx_select_text->labelsize(14);
      txt_hx_select_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_hx_select_text->align(FL_ALIGN_TOP_LEFT);
      txt_hx_select_text->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_hx_select_text
    { btn_hx_select_cancel = new Fl_Button(229, 20, 60, 24, _("Cancel"));
      btn_hx_select_cancel->callback((Fl_Callback*)cb_btn_hx_select_cancel);
    } // Fl_Button* btn_hx_select_cancel
    { btn_hx_select_ok = new Fl_Return_Button(293, 20, 60, 24, _("OK"));
      btn_hx_select_ok->callback((Fl_Callback*)cb_btn_hx_select_ok);
    } // Fl_Return_Button* btn_hx_select_ok
    { txt_hx_instructions = new Fl_Output(5, 47, 348, 70);
      txt_hx_instructions->type(12);
      txt_hx_instructions->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Output* txt_hx_instructions
    o->end();
  } // Fl_Double_Window* o
  return w;
}
