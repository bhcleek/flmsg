// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "flmsg_dialog.h"
#include "status.h"

static void cb_mnuNew(Fl_Menu_*, void*) {
  cb_new();
}

static void cb_mnuOpen(Fl_Menu_*, void*) {
  cb_open();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  cb_save();
}

static void cb_mnuSaveAs(Fl_Menu_*, void*) {
  cb_save_as();
}

static void cb_mnu_html(Fl_Menu_*, void*) {
  cb_html();
}

static void cb_mnu_rtf(Fl_Menu_*, void*) {
  cb_rtf();
}

static void cb_mnu_text(Fl_Menu_*, void*) {
  cb_text();
}

static void cb_mnu_qimport(Fl_Menu_*, void*) {
  cb_import();
}

static void cb_mnu_qexport(Fl_Menu_*, void*) {
  cb_export();
}

static void cb_mnuWrapImport(Fl_Menu_*, void*) {
  cb_wrap_import();
}

static void cb_mnuWrapExport(Fl_Menu_*, void*) {
  cb_wrap_export();
}

static void cb_mnuAutoSend(Fl_Menu_*, void*) {
  cb_wrap_autosend();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cb_exit();
}

static void cb_mnu_load_template(Fl_Menu_*, void*) {
  cb_load_template();
}

static void cb_mnu_save_template(Fl_Menu_*, void*) {
  cb_save_template();
}

static void cb_mnu_save_as_template(Fl_Menu_*, void*) {
  cb_save_as_template();
}

static void cb_mnuConfig(Fl_Menu_*, void*) {
  cb_config();
}

static void cb_mnuOptions(Fl_Menu_*, void*) {
  showoptions();
}

static void cb_mnuOnLineHelp(Fl_Menu_*, void*) {
  show_help();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  cb_About();
}

Fl_Menu_Item menu_[] = {
 {_("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&New"), 0x4006e,  (Fl_Callback*)cb_mnuNew, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Open"), 0x4006f,  (Fl_Callback*)cb_mnuOpen, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Save"), 0x40073,  (Fl_Callback*)cb_mnuSave, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save &As"), 0x40061,  (Fl_Callback*)cb_mnuSaveAs, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("View"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Html format"), 0,  (Fl_Callback*)cb_mnu_html, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Rich text format"), 0,  (Fl_Callback*)cb_mnu_rtf, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Text"), 0,  (Fl_Callback*)cb_mnu_text, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Q-forms"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnu_qimport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnu_qexport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Wrap"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  (Fl_Callback*)cb_mnuWrapImport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export"), 0,  (Fl_Callback*)cb_mnuWrapExport, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("AutoSend"), 0,  (Fl_Callback*)cb_mnuAutoSend, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("E&xit"), 0x40078,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Template"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Load"), 0,  (Fl_Callback*)cb_mnu_load_template, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save"), 0,  (Fl_Callback*)cb_mnu_save_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save As"), 0,  (Fl_Callback*)cb_mnu_save_as_template, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Config"), 0,  (Fl_Callback*)cb_mnuConfig, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("      "), 0,  0, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Command line options"), 0,  (Fl_Callback*)cb_mnuOptions, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("On Line help"), 0,  (Fl_Callback*)cb_mnuOnLineHelp, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Output *txt_filename=(Fl_Output *)0;

Fl_Tabs *tabs_msg_type=(Fl_Tabs *)0;

static void cb_tabs_msg_type(Fl_Tabs*, void*) {
  cb_msg_type();
}

Fl_Group *tab_ics213=(Fl_Group *)0;

Fl_Tabs *tabs_ics213=(Fl_Tabs *)0;

Fl_Group *tab_originator=(Fl_Group *)0;

Fl_Input2 *txt_To=(Fl_Input2 *)0;

Fl_Input2 *txt_P1=(Fl_Input2 *)0;

Fl_Input2 *txt_Fm=(Fl_Input2 *)0;

Fl_Input2 *txt_P2=(Fl_Input2 *)0;

Fl_Input2 *txt_Subj=(Fl_Input2 *)0;

Fl_DateInput *txt_D1=(Fl_DateInput *)0;

Fl_Button *btnDate1=(Fl_Button *)0;

static void cb_btnDate1(Fl_Button*, void*) {
  cb_SetDate1();
}

Fl_Input2 *txt_T1=(Fl_Input2 *)0;

Fl_Button *btnTime1=(Fl_Button *)0;

static void cb_btnTime1(Fl_Button*, void*) {
  cb_SetTime1();
}

FTextEdit *txt_Msg=(FTextEdit *)0;

Fl_Input2 *txt_S1=(Fl_Input2 *)0;

Fl_Input2 *txt_P3=(Fl_Input2 *)0;

Fl_Group *tab_responder=(Fl_Group *)0;

Fl_Input2 *txt_S2=(Fl_Input2 *)0;

Fl_DateInput *txt_D2=(Fl_DateInput *)0;

Fl_Input2 *txt_T2=(Fl_Input2 *)0;

Fl_Button *btnTime2=(Fl_Button *)0;

static void cb_btnTime2(Fl_Button*, void*) {
  cb_SetTime2();
}

FTextEdit *txt_Reply=(FTextEdit *)0;

Fl_Input2 *txt_P4=(Fl_Input2 *)0;

Fl_Button *btnDate2=(Fl_Button *)0;

static void cb_btnDate2(Fl_Button*, void*) {
  cb_SetDate2();
}

Fl_Group *tab_radiogram=(Fl_Group *)0;

Fl_Tabs *tabs_radiogram=(Fl_Tabs *)0;

Fl_Group *tab_radiogram_message=(Fl_Group *)0;

Fl_Input2 *txt_rg_nbr=(Fl_Input2 *)0;

Fl_Choice *sel_rg_prec=(Fl_Choice *)0;

Fl_Input2 *txt_rg_hx=(Fl_Input2 *)0;

Fl_Button *btn_rg_hx=(Fl_Button *)0;

static void cb_btn_rg_hx(Fl_Button*, void*) {
  cb_hx();
}

Fl_Input2 *txt_rg_station=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_place=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_t1=(Fl_Input2 *)0;

Fl_Button *btn_rgTime1=(Fl_Button *)0;

static void cb_btn_rgTime1(Fl_Button*, void*) {
  cb_rgSetTime1();
}

Fl_Input2 *txt_rg_d1=(Fl_Input2 *)0;

Fl_Button *btn_rgDate1=(Fl_Button *)0;

static void cb_btn_rgDate1(Fl_Button*, void*) {
  cb_rgSetDate1();
}

Fl_Input2 *txt_rg_to=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_phone=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_opnote=(Fl_Input2 *)0;

FTextEdit *txt_rg_msg=(FTextEdit *)0;

Fl_Button *btn_arl=(Fl_Button *)0;

static void cb_btn_arl(Fl_Button*, void*) {
  cb_arl();
}

Fl_Input2 *txt_rg_check=(Fl_Input2 *)0;

Fl_Button *btn_rg_check=(Fl_Button *)0;

static void cb_btn_rg_check(Fl_Button*, void*) {
  cb_rg_check();
}

Fl_Input2 *txt_rg_sig=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_opnote2=(Fl_Input2 *)0;

Fl_Check_Button *btn_rg_svc=(Fl_Check_Button *)0;

Fl_Group *tab_radiogram_information=(Fl_Group *)0;

Fl_Input2 *txt_rg_orig=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt2=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime2=(Fl_Button *)0;

static void cb_btn_rgDateTime2(Fl_Button*, void*) {
  cb_rgSetDateTime2();
}

Fl_Input2 *txt_rg_dt3=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime3=(Fl_Button *)0;

static void cb_btn_rgDateTime3(Fl_Button*, void*) {
  cb_rgSetDateTime3();
}

Fl_Input2 *txt_rg_sent_to=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_rcv_fm=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_rcv_net=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt4=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime4=(Fl_Button *)0;

static void cb_btn_rgDateTime4(Fl_Button*, void*) {
  cb_rgSetDateTime4();
}

Fl_Input2 *txt_rg_dlvd_to=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_snt_net=(Fl_Input2 *)0;

Fl_Input2 *txt_rg_dt5=(Fl_Input2 *)0;

Fl_Button *btn_rgDateTime5=(Fl_Button *)0;

static void cb_btn_rgDateTime5(Fl_Button*, void*) {
  cb_rgSetDateTime5();
}

Fl_Double_Window* ics_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(570, 430, _("Standard Message Generator"));
    w = o;
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 280, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { txt_filename = new Fl_Output(363, 2, 205, 20, _("filename:"));
      txt_filename->box(FL_FLAT_BOX);
      txt_filename->color((Fl_Color)FL_BACKGROUND_COLOR);
    } // Fl_Output* txt_filename
    { tabs_msg_type = new Fl_Tabs(0, 22, 570, 405);
      tabs_msg_type->callback((Fl_Callback*)cb_tabs_msg_type);
      { tab_ics213 = new Fl_Group(0, 44, 570, 382, _("ICS213"));
        { tabs_ics213 = new Fl_Tabs(0, 44, 570, 382);
          { tab_originator = new Fl_Group(0, 70, 570, 354, _("Originator"));
            { txt_To = new Fl_Input2(39, 77, 242, 24, _("To"));
              txt_To->tooltip(_("Addressee"));
              txt_To->box(FL_DOWN_BOX);
              txt_To->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_To->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_To->labeltype(FL_NORMAL_LABEL);
              txt_To->labelfont(0);
              txt_To->labelsize(14);
              txt_To->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_To->align(FL_ALIGN_LEFT);
              txt_To->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_To
            { txt_P1 = new Fl_Input2(320, 77, 242, 24, _("Pos."));
              txt_P1->tooltip(_("Position of addressee"));
              txt_P1->box(FL_DOWN_BOX);
              txt_P1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_P1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_P1->labeltype(FL_NORMAL_LABEL);
              txt_P1->labelfont(0);
              txt_P1->labelsize(14);
              txt_P1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_P1->align(FL_ALIGN_LEFT);
              txt_P1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_P1
            { txt_Fm = new Fl_Input2(39, 103, 242, 24, _("Fm"));
              txt_Fm->tooltip(_("Originator"));
              txt_Fm->box(FL_DOWN_BOX);
              txt_Fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_Fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_Fm->labeltype(FL_NORMAL_LABEL);
              txt_Fm->labelfont(0);
              txt_Fm->labelsize(14);
              txt_Fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_Fm->align(FL_ALIGN_LEFT);
              txt_Fm->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_Fm
            { txt_P2 = new Fl_Input2(320, 103, 242, 24, _("Pos."));
              txt_P2->tooltip(_("Position of originator"));
              txt_P2->box(FL_DOWN_BOX);
              txt_P2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_P2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_P2->labeltype(FL_NORMAL_LABEL);
              txt_P2->labelfont(0);
              txt_P2->labelsize(14);
              txt_P2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_P2->align(FL_ALIGN_LEFT);
              txt_P2->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_P2
            { txt_Subj = new Fl_Input2(39, 129, 522, 24, _("Sub."));
              txt_Subj->tooltip(_("Subject"));
              txt_Subj->box(FL_DOWN_BOX);
              txt_Subj->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_Subj->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_Subj->labeltype(FL_NORMAL_LABEL);
              txt_Subj->labelfont(0);
              txt_Subj->labelsize(14);
              txt_Subj->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_Subj->align(FL_ALIGN_LEFT);
              txt_Subj->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_Subj
            { txt_D1 = new Fl_DateInput(231, 155, 125, 24, _("Date"));
              txt_D1->tooltip(_("Date of origination"));
              txt_D1->box(FL_DOWN_BOX);
              txt_D1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_D1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_D1->labeltype(FL_NORMAL_LABEL);
              txt_D1->labelfont(0);
              txt_D1->labelsize(14);
              txt_D1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_D1->align(FL_ALIGN_LEFT);
              txt_D1->when(FL_WHEN_RELEASE);
              txt_D1->format(2);
            } // Fl_DateInput* txt_D1
            { btnDate1 = new Fl_Button(364, 157, 20, 20, _("..."));
              btnDate1->tooltip(_("Set today"));
              btnDate1->callback((Fl_Callback*)cb_btnDate1);
            } // Fl_Button* btnDate1
            { txt_T1 = new Fl_Input2(429, 155, 103, 24, _("Time"));
              txt_T1->tooltip(_("Time of origination"));
              txt_T1->box(FL_DOWN_BOX);
              txt_T1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_T1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_T1->labeltype(FL_NORMAL_LABEL);
              txt_T1->labelfont(0);
              txt_T1->labelsize(14);
              txt_T1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_T1->align(FL_ALIGN_LEFT);
              txt_T1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_T1
            { btnTime1 = new Fl_Button(539, 157, 20, 20, _("..."));
              btnTime1->tooltip(_("Set time now"));
              btnTime1->callback((Fl_Callback*)cb_btnTime1);
            } // Fl_Button* btnTime1
            { txt_Msg = new FTextEdit(4, 185, 562, 200, _("Message:"));
              txt_Msg->box(FL_DOWN_FRAME);
              txt_Msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_Msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_Msg->labeltype(FL_NORMAL_LABEL);
              txt_Msg->labelfont(0);
              txt_Msg->labelsize(14);
              txt_Msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_Msg->align(FL_ALIGN_TOP_LEFT);
              txt_Msg->when(FL_WHEN_RELEASE);
              Fl_Group::current()->resizable(txt_Msg);
            } // FTextEdit* txt_Msg
            { txt_S1 = new Fl_Input2(32, 389, 247, 24, _("Sig."));
              txt_S1->tooltip(_("Signature of preparer"));
              txt_S1->box(FL_DOWN_BOX);
              txt_S1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_S1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_S1->labeltype(FL_NORMAL_LABEL);
              txt_S1->labelfont(0);
              txt_S1->labelsize(14);
              txt_S1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_S1->align(FL_ALIGN_LEFT);
              txt_S1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_S1
            { txt_P3 = new Fl_Input2(315, 389, 247, 24, _("Pos."));
              txt_P3->tooltip(_("Position of preparer"));
              txt_P3->box(FL_DOWN_BOX);
              txt_P3->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_P3->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_P3->labeltype(FL_NORMAL_LABEL);
              txt_P3->labelfont(0);
              txt_P3->labelsize(14);
              txt_P3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_P3->align(FL_ALIGN_LEFT);
              txt_P3->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_P3
            tab_originator->end();
          } // Fl_Group* tab_originator
          { tab_responder = new Fl_Group(0, 70, 570, 354, _("Responder"));
            tab_responder->hide();
            { txt_S2 = new Fl_Input2(36, 387, 248, 24, _("Sig."));
              txt_S2->tooltip(_("Signature of responder"));
              txt_S2->box(FL_DOWN_BOX);
              txt_S2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_S2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_S2->labeltype(FL_NORMAL_LABEL);
              txt_S2->labelfont(0);
              txt_S2->labelsize(14);
              txt_S2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_S2->align(FL_ALIGN_LEFT);
              txt_S2->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_S2
            { txt_D2 = new Fl_DateInput(242, 78, 126, 24, _("Date"));
              txt_D2->tooltip(_("Reply Date"));
              txt_D2->box(FL_DOWN_BOX);
              txt_D2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_D2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_D2->labeltype(FL_NORMAL_LABEL);
              txt_D2->labelfont(0);
              txt_D2->labelsize(14);
              txt_D2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_D2->align(FL_ALIGN_LEFT);
              txt_D2->when(FL_WHEN_RELEASE);
            } // Fl_DateInput* txt_D2
            { txt_T2 = new Fl_Input2(433, 78, 103, 24, _("Time"));
              txt_T2->tooltip(_("Reply Time"));
              txt_T2->box(FL_DOWN_BOX);
              txt_T2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_T2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_T2->labeltype(FL_NORMAL_LABEL);
              txt_T2->labelfont(0);
              txt_T2->labelsize(14);
              txt_T2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_T2->align(FL_ALIGN_LEFT);
              txt_T2->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_T2
            { btnTime2 = new Fl_Button(539, 78, 24, 24, _("..."));
              btnTime2->tooltip(_("Now"));
              btnTime2->callback((Fl_Callback*)cb_btnTime2);
            } // Fl_Button* btnTime2
            { txt_Reply = new FTextEdit(4, 108, 562, 275, _("Reply"));
              txt_Reply->box(FL_DOWN_FRAME);
              txt_Reply->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_Reply->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_Reply->labeltype(FL_NORMAL_LABEL);
              txt_Reply->labelfont(0);
              txt_Reply->labelsize(14);
              txt_Reply->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_Reply->align(FL_ALIGN_TOP_LEFT);
              txt_Reply->when(FL_WHEN_RELEASE);
            } // FTextEdit* txt_Reply
            { txt_P4 = new Fl_Input2(322, 387, 242, 24, _("Pos."));
              txt_P4->tooltip(_("Position of responder"));
              txt_P4->box(FL_DOWN_BOX);
              txt_P4->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_P4->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_P4->labeltype(FL_NORMAL_LABEL);
              txt_P4->labelfont(0);
              txt_P4->labelsize(14);
              txt_P4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_P4->align(FL_ALIGN_LEFT);
              txt_P4->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_P4
            { btnDate2 = new Fl_Button(369, 78, 24, 24, _("..."));
              btnDate2->tooltip(_("Today"));
              btnDate2->callback((Fl_Callback*)cb_btnDate2);
            } // Fl_Button* btnDate2
            tab_responder->end();
            Fl_Group::current()->resizable(tab_responder);
          } // Fl_Group* tab_responder
          tabs_ics213->end();
          Fl_Group::current()->resizable(tabs_ics213);
        } // Fl_Tabs* tabs_ics213
        tab_ics213->end();
      } // Fl_Group* tab_ics213
      { tab_radiogram = new Fl_Group(0, 44, 570, 383, _("Radiogram"));
        tab_radiogram->hide();
        { tabs_radiogram = new Fl_Tabs(0, 44, 570, 383);
          { tab_radiogram_message = new Fl_Group(0, 71, 570, 354, _("Part A"));
            { txt_rg_nbr = new Fl_Input2(36, 96, 50, 24, _("*NR"));
              txt_rg_nbr->tooltip(_("Message number at station of origin"));
              txt_rg_nbr->box(FL_DOWN_BOX);
              txt_rg_nbr->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_nbr->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_nbr->labeltype(FL_NORMAL_LABEL);
              txt_rg_nbr->labelfont(0);
              txt_rg_nbr->labelsize(14);
              txt_rg_nbr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_nbr->align(FL_ALIGN_TOP);
              txt_rg_nbr->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_nbr
            { sel_rg_prec = new Fl_Choice(88, 96, 120, 24, _("*PREC"));
              sel_rg_prec->tooltip(_("Message Precedence"));
              sel_rg_prec->down_box(FL_BORDER_BOX);
              sel_rg_prec->align(FL_ALIGN_TOP);
            } // Fl_Choice* sel_rg_prec
            { txt_rg_hx = new Fl_Input2(210, 96, 95, 24, _("HX__"));
              txt_rg_hx->tooltip(_("Handling instructions"));
              txt_rg_hx->box(FL_DOWN_BOX);
              txt_rg_hx->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_hx->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_hx->labeltype(FL_NORMAL_LABEL);
              txt_rg_hx->labelfont(0);
              txt_rg_hx->labelsize(14);
              txt_rg_hx->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_hx->align(FL_ALIGN_TOP);
              txt_rg_hx->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_hx
            { btn_rg_hx = new Fl_Button(308, 96, 24, 24, _("hx"));
              btn_rg_hx->tooltip(_("Open HX dialog"));
              btn_rg_hx->callback((Fl_Callback*)cb_btn_rg_hx);
            } // Fl_Button* btn_rg_hx
            { txt_rg_station = new Fl_Input2(336, 96, 101, 24, _("*STN ORIG"));
              txt_rg_station->tooltip(_("Station call sign"));
              txt_rg_station->box(FL_DOWN_BOX);
              txt_rg_station->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_station->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_station->labeltype(FL_NORMAL_LABEL);
              txt_rg_station->labelfont(0);
              txt_rg_station->labelsize(14);
              txt_rg_station->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_station->align(FL_ALIGN_TOP);
              txt_rg_station->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_station
            { txt_rg_place = new Fl_Input2(6, 137, 266, 24, _("PLACE OF ORIG"));
              txt_rg_place->tooltip(_("Place of origin"));
              txt_rg_place->box(FL_DOWN_BOX);
              txt_rg_place->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_place->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_place->labeltype(FL_NORMAL_LABEL);
              txt_rg_place->labelfont(0);
              txt_rg_place->labelsize(14);
              txt_rg_place->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_place->align(FL_ALIGN_TOP_LEFT);
              txt_rg_place->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_place
            { txt_rg_t1 = new Fl_Input2(288, 137, 81, 24, _("TIME FILED"));
              txt_rg_t1->tooltip(_("Time of origination"));
              txt_rg_t1->box(FL_DOWN_BOX);
              txt_rg_t1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_t1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_t1->labeltype(FL_NORMAL_LABEL);
              txt_rg_t1->labelfont(0);
              txt_rg_t1->labelsize(14);
              txt_rg_t1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_t1->align(FL_ALIGN_TOP_LEFT);
              txt_rg_t1->when(FL_WHEN_CHANGED);
            } // Fl_Input2* txt_rg_t1
            { btn_rgTime1 = new Fl_Button(372, 137, 24, 24, _("..."));
              btn_rgTime1->tooltip(_("Set time now"));
              btn_rgTime1->callback((Fl_Callback*)cb_btn_rgTime1);
            } // Fl_Button* btn_rgTime1
            { txt_rg_d1 = new Fl_Input2(416, 137, 123, 24, _("*MON DY"));
              txt_rg_d1->tooltip(_("Date of origination"));
              txt_rg_d1->box(FL_DOWN_BOX);
              txt_rg_d1->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_d1->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_d1->labeltype(FL_NORMAL_LABEL);
              txt_rg_d1->labelfont(0);
              txt_rg_d1->labelsize(14);
              txt_rg_d1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_d1->align(FL_ALIGN_TOP_LEFT);
              txt_rg_d1->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_d1
            { btn_rgDate1 = new Fl_Button(541, 137, 24, 24, _("..."));
              btn_rgDate1->tooltip(_("Set today"));
              btn_rgDate1->callback((Fl_Callback*)cb_btn_rgDate1);
            } // Fl_Button* btn_rgDate1
            { txt_rg_to = new Fl_Input2(6, 179, 277, 70, _("*TO"));
              txt_rg_to->tooltip(_("Addressee"));
              txt_rg_to->type(4);
              txt_rg_to->box(FL_DOWN_BOX);
              txt_rg_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_to->labeltype(FL_NORMAL_LABEL);
              txt_rg_to->labelfont(0);
              txt_rg_to->labelsize(14);
              txt_rg_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_to->align(FL_ALIGN_TOP_LEFT);
              txt_rg_to->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_to
            { txt_rg_phone = new Fl_Input2(327, 176, 238, 24, _("TEL:"));
              txt_rg_phone->tooltip(_("Addressee telephone number"));
              txt_rg_phone->box(FL_DOWN_BOX);
              txt_rg_phone->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_phone->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_phone->labeltype(FL_NORMAL_LABEL);
              txt_rg_phone->labelfont(0);
              txt_rg_phone->labelsize(14);
              txt_rg_phone->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_phone->align(FL_ALIGN_LEFT);
              txt_rg_phone->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_phone
            { txt_rg_opnote = new Fl_Input2(360, 203, 205, 24, _("OP NOTE:"));
              txt_rg_opnote->tooltip(_("Operating notes"));
              txt_rg_opnote->box(FL_DOWN_BOX);
              txt_rg_opnote->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_opnote->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_opnote->labeltype(FL_NORMAL_LABEL);
              txt_rg_opnote->labelfont(0);
              txt_rg_opnote->labelsize(14);
              txt_rg_opnote->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_opnote->align(FL_ALIGN_LEFT);
              txt_rg_opnote->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_opnote
            { txt_rg_msg = new FTextEdit(4, 271, 562, 119, _("TXT:"));
              txt_rg_msg->tooltip(_("Message contents - recommend limit to 25 words or less"));
              txt_rg_msg->box(FL_DOWN_BOX);
              txt_rg_msg->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_msg->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_msg->labeltype(FL_NORMAL_LABEL);
              txt_rg_msg->labelfont(0);
              txt_rg_msg->labelsize(14);
              txt_rg_msg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_msg->align(FL_ALIGN_TOP_LEFT);
              txt_rg_msg->when(FL_WHEN_RELEASE);
            } // FTextEdit* txt_rg_msg
            { btn_arl = new Fl_Button(489, 238, 76, 24, _("ARL MSG"));
              btn_arl->tooltip(_("ARL message selector"));
              btn_arl->callback((Fl_Callback*)cb_btn_arl);
            } // Fl_Button* btn_arl
            { txt_rg_check = new Fl_Input2(439, 96, 101, 24, _("CK"));
              txt_rg_check->tooltip(_("Message check count"));
              txt_rg_check->box(FL_DOWN_BOX);
              txt_rg_check->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_check->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_check->labeltype(FL_NORMAL_LABEL);
              txt_rg_check->labelfont(0);
              txt_rg_check->labelsize(14);
              txt_rg_check->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_check->align(FL_ALIGN_TOP);
              txt_rg_check->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_check
            { btn_rg_check = new Fl_Button(541, 96, 24, 24, _("ck"));
              btn_rg_check->tooltip(_("Compute check count"));
              btn_rg_check->callback((Fl_Callback*)cb_btn_rg_check);
            } // Fl_Button* btn_rg_check
            { txt_rg_sig = new Fl_Input2(48, 396, 238, 24, _("SIG:"));
              txt_rg_sig->tooltip(_("Addressee telephone number"));
              txt_rg_sig->box(FL_DOWN_BOX);
              txt_rg_sig->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_sig->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_sig->labeltype(FL_NORMAL_LABEL);
              txt_rg_sig->labelfont(0);
              txt_rg_sig->labelsize(14);
              txt_rg_sig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_sig->align(FL_ALIGN_LEFT);
              txt_rg_sig->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_sig
            { txt_rg_opnote2 = new Fl_Input2(364, 396, 201, 24, _("OP NOTE:"));
              txt_rg_opnote2->tooltip(_("Operating notes"));
              txt_rg_opnote2->box(FL_DOWN_BOX);
              txt_rg_opnote2->color((Fl_Color)FL_BACKGROUND2_COLOR);
              txt_rg_opnote2->selection_color((Fl_Color)FL_SELECTION_COLOR);
              txt_rg_opnote2->labeltype(FL_NORMAL_LABEL);
              txt_rg_opnote2->labelfont(0);
              txt_rg_opnote2->labelsize(14);
              txt_rg_opnote2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
              txt_rg_opnote2->align(FL_ALIGN_LEFT);
              txt_rg_opnote2->when(FL_WHEN_RELEASE);
            } // Fl_Input2* txt_rg_opnote2
            { btn_rg_svc = new Fl_Check_Button(12, 100, 17, 15, _("SVC"));
              btn_rg_svc->down_box(FL_DOWN_BOX);
              btn_rg_svc->align(FL_ALIGN_TOP);
            } // Fl_Check_Button* btn_rg_svc
            tab_radiogram_message->end();
          } // Fl_Group* tab_radiogram_message
          { tab_radiogram_information = new Fl_Group(0, 73, 570, 354, _("Part B"));
            tab_radiogram_information->hide();
            { Fl_Group* o = new Fl_Group(5, 113, 560, 140, _("ORIG - FM - DATE/TIME"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { txt_rg_orig = new Fl_Input2(10, 148, 550, 100, _("Name/Addr/City/Tel"));
                txt_rg_orig->tooltip(_("Person requesting message"));
                txt_rg_orig->type(4);
                txt_rg_orig->box(FL_DOWN_BOX);
                txt_rg_orig->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_orig->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_orig->labeltype(FL_NORMAL_LABEL);
                txt_rg_orig->labelfont(0);
                txt_rg_orig->labelsize(14);
                txt_rg_orig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_orig->align(FL_ALIGN_TOP_LEFT);
                txt_rg_orig->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_orig
              { txt_rg_dt2 = new Fl_Input2(381, 119, 152, 24, _("DT/TM"));
                txt_rg_dt2->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt2->box(FL_DOWN_BOX);
                txt_rg_dt2->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt2->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt2->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt2->labelfont(0);
                txt_rg_dt2->labelsize(14);
                txt_rg_dt2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt2->align(FL_ALIGN_LEFT);
                txt_rg_dt2->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt2
              { btn_rgDateTime2 = new Fl_Button(536, 119, 24, 24, _("..."));
                btn_rgDateTime2->tooltip(_("Set today"));
                btn_rgDateTime2->callback((Fl_Callback*)cb_btn_rgDateTime2);
              } // Fl_Button* btn_rgDateTime2
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 284, 560, 140, _("DLVD -TO - DATE/TIME"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { txt_rg_dt3 = new Fl_Input2(381, 290, 152, 24, _("DT/TM"));
                txt_rg_dt3->tooltip(_("ddhhmm MMM YY of deliver"));
                txt_rg_dt3->box(FL_DOWN_BOX);
                txt_rg_dt3->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt3->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt3->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt3->labelfont(0);
                txt_rg_dt3->labelsize(14);
                txt_rg_dt3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt3->align(FL_ALIGN_LEFT);
                txt_rg_dt3->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt3
              { btn_rgDateTime3 = new Fl_Button(537, 290, 24, 24, _("..."));
                btn_rgDateTime3->tooltip(_("Set to today"));
                btn_rgDateTime3->callback((Fl_Callback*)cb_btn_rgDateTime3);
              } // Fl_Button* btn_rgDateTime3
              { txt_rg_sent_to = new Fl_Input2(10, 319, 550, 100, _("Name/Addr/City/Tel"));
                txt_rg_sent_to->tooltip(_("Message sent to"));
                txt_rg_sent_to->type(4);
                txt_rg_sent_to->box(FL_DOWN_BOX);
                txt_rg_sent_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_sent_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_sent_to->labeltype(FL_NORMAL_LABEL);
                txt_rg_sent_to->labelfont(0);
                txt_rg_sent_to->labelsize(14);
                txt_rg_sent_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_sent_to->align(FL_ALIGN_TOP_LEFT);
                txt_rg_sent_to->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_sent_to
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 82, 560, 30);
              o->box(FL_ENGRAVED_FRAME);
              { txt_rg_rcv_fm = new Fl_Input2(82, 85, 100, 24, _("RCVD FM:"));
                txt_rg_rcv_fm->tooltip(_("Addressee telephone number"));
                txt_rg_rcv_fm->box(FL_DOWN_BOX);
                txt_rg_rcv_fm->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_rcv_fm->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_rcv_fm->labeltype(FL_NORMAL_LABEL);
                txt_rg_rcv_fm->labelfont(0);
                txt_rg_rcv_fm->labelsize(14);
                txt_rg_rcv_fm->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_rcv_fm->align(FL_ALIGN_LEFT);
                txt_rg_rcv_fm->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_rcv_fm
              { txt_rg_rcv_net = new Fl_Input2(221, 85, 100, 24, _("NET:"));
                txt_rg_rcv_net->tooltip(_("Addressee telephone number"));
                txt_rg_rcv_net->box(FL_DOWN_BOX);
                txt_rg_rcv_net->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_rcv_net->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_rcv_net->labeltype(FL_NORMAL_LABEL);
                txt_rg_rcv_net->labelfont(0);
                txt_rg_rcv_net->labelsize(14);
                txt_rg_rcv_net->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_rcv_net->align(FL_ALIGN_LEFT);
                txt_rg_rcv_net->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_rcv_net
              { txt_rg_dt4 = new Fl_Input2(381, 85, 152, 24, _("DT/TM"));
                txt_rg_dt4->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt4->box(FL_DOWN_BOX);
                txt_rg_dt4->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt4->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt4->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt4->labelfont(0);
                txt_rg_dt4->labelsize(14);
                txt_rg_dt4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt4->align(FL_ALIGN_LEFT);
                txt_rg_dt4->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt4
              { btn_rgDateTime4 = new Fl_Button(536, 85, 24, 24, _("..."));
                btn_rgDateTime4->tooltip(_("Set today"));
                btn_rgDateTime4->callback((Fl_Callback*)cb_btn_rgDateTime4);
              } // Fl_Button* btn_rgDateTime4
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(5, 253, 560, 30);
              o->box(FL_ENGRAVED_FRAME);
              { txt_rg_dlvd_to = new Fl_Input2(82, 256, 100, 24, _("SENT TO:"));
                txt_rg_dlvd_to->tooltip(_("Addressee telephone number"));
                txt_rg_dlvd_to->box(FL_DOWN_BOX);
                txt_rg_dlvd_to->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dlvd_to->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dlvd_to->labeltype(FL_NORMAL_LABEL);
                txt_rg_dlvd_to->labelfont(0);
                txt_rg_dlvd_to->labelsize(14);
                txt_rg_dlvd_to->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dlvd_to->align(FL_ALIGN_LEFT);
                txt_rg_dlvd_to->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dlvd_to
              { txt_rg_snt_net = new Fl_Input2(221, 256, 100, 24, _("NET:"));
                txt_rg_snt_net->tooltip(_("Addressee telephone number"));
                txt_rg_snt_net->box(FL_DOWN_BOX);
                txt_rg_snt_net->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_snt_net->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_snt_net->labeltype(FL_NORMAL_LABEL);
                txt_rg_snt_net->labelfont(0);
                txt_rg_snt_net->labelsize(14);
                txt_rg_snt_net->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_snt_net->align(FL_ALIGN_LEFT);
                txt_rg_snt_net->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_snt_net
              { txt_rg_dt5 = new Fl_Input2(381, 256, 152, 24, _("DT/TM"));
                txt_rg_dt5->tooltip(_("ddhhmm MMM YY of preparation"));
                txt_rg_dt5->box(FL_DOWN_BOX);
                txt_rg_dt5->color((Fl_Color)FL_BACKGROUND2_COLOR);
                txt_rg_dt5->selection_color((Fl_Color)FL_SELECTION_COLOR);
                txt_rg_dt5->labeltype(FL_NORMAL_LABEL);
                txt_rg_dt5->labelfont(0);
                txt_rg_dt5->labelsize(14);
                txt_rg_dt5->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                txt_rg_dt5->align(FL_ALIGN_LEFT);
                txt_rg_dt5->when(FL_WHEN_RELEASE);
              } // Fl_Input2* txt_rg_dt5
              { btn_rgDateTime5 = new Fl_Button(536, 256, 24, 24, _("..."));
                btn_rgDateTime5->tooltip(_("Set today"));
                btn_rgDateTime5->callback((Fl_Callback*)cb_btn_rgDateTime5);
              } // Fl_Button* btn_rgDateTime5
              o->end();
            } // Fl_Group* o
            tab_radiogram_information->end();
            Fl_Group::current()->resizable(tab_radiogram_information);
          } // Fl_Group* tab_radiogram_information
          tabs_radiogram->end();
          Fl_Group::current()->resizable(tabs_radiogram);
        } // Fl_Tabs* tabs_radiogram
        tab_radiogram->end();
      } // Fl_Group* tab_radiogram
      tabs_msg_type->end();
    } // Fl_Tabs* tabs_msg_type
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *brwsOptions=(Fl_Browser *)0;

Fl_Return_Button *btnCloseOptions=(Fl_Return_Button *)0;

static void cb_btnCloseOptions(Fl_Return_Button*, void*) {
  closeoptions();
}

Fl_Double_Window* optionsdialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(410, 260, _("Command Line Options"));
    w = o;
    { brwsOptions = new Fl_Browser(3, 31, 405, 202);
    } // Fl_Browser* brwsOptions
    { btnCloseOptions = new Fl_Return_Button(329, 239, 72, 20, _("OK"));
      btnCloseOptions->callback((Fl_Callback*)cb_btnCloseOptions);
    } // Fl_Return_Button* btnCloseOptions
    { Fl_Box* o = new Fl_Box(4, 7, 401, 21, _("usage: flics -<option> [filename]"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)FL_LIGHT3);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *select_arl=(Fl_Browser *)0;

static void cb_select_arl(Fl_Browser* o, void*) {
  arl_nbr = o->value()- 1;
arl_text->clear();
arl_text->addstr(arl_list[arl_nbr].text);
txt_arl_fill1->value("");
txt_arl_fill1->deactivate();
txt_arl_fill2->value("");
txt_arl_fill2->deactivate();
txt_arl_fill3->value("");
txt_arl_fill3->deactivate();
txt_arl_fill4->value("");
txt_arl_fill4->deactivate();
if (arl_list[arl_nbr].nfills > 0) txt_arl_fill1->activate();
if (arl_list[arl_nbr].nfills > 1) txt_arl_fill2->activate();
if (arl_list[arl_nbr].nfills > 2) txt_arl_fill3->activate();
if (arl_list[arl_nbr].nfills > 3) txt_arl_fill4->activate();
}

Fl_Input *txt_arl_fill1=(Fl_Input *)0;

Fl_Input *txt_arl_fill2=(Fl_Input *)0;

Fl_Input *txt_arl_fill3=(Fl_Input *)0;

Fl_Input *txt_arl_fill4=(Fl_Input *)0;

Fl_Button *btn_arl_cancel=(Fl_Button *)0;

static void cb_btn_arl_cancel(Fl_Button*, void*) {
  cb_arl_cancel();
}

Fl_Button *btn_arl_add=(Fl_Button *)0;

static void cb_btn_arl_add(Fl_Button*, void*) {
  cb_arl_add();
}

FTextEdit *arl_text=(FTextEdit *)0;

Fl_Double_Window* arl_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(521, 261, _("ARL Message Selector"));
    w = o;
    { select_arl = new Fl_Browser(6, 21, 161, 107, _("ARL #"));
      select_arl->type(2);
      select_arl->callback((Fl_Callback*)cb_select_arl);
      select_arl->align(FL_ALIGN_TOP);
    } // Fl_Browser* select_arl
    { txt_arl_fill1 = new Fl_Input(48, 131, 465, 22, _("fill 1:"));
    } // Fl_Input* txt_arl_fill1
    { txt_arl_fill2 = new Fl_Input(48, 155, 465, 22, _("fill 2:"));
    } // Fl_Input* txt_arl_fill2
    { txt_arl_fill3 = new Fl_Input(48, 179, 465, 22, _("fill 3:"));
    } // Fl_Input* txt_arl_fill3
    { txt_arl_fill4 = new Fl_Input(48, 204, 465, 22, _("fill 4:"));
    } // Fl_Input* txt_arl_fill4
    { btn_arl_cancel = new Fl_Button(362, 232, 70, 20, _("Cancel"));
      btn_arl_cancel->callback((Fl_Callback*)cb_btn_arl_cancel);
    } // Fl_Button* btn_arl_cancel
    { btn_arl_add = new Fl_Button(440, 232, 70, 20, _("Add"));
      btn_arl_add->callback((Fl_Callback*)cb_btn_arl_add);
    } // Fl_Button* btn_arl_add
    { arl_text = new FTextEdit(169, 21, 345, 107, _("Message:"));
      arl_text->tooltip(_("Message contents - recommend limit to 25 words or less"));
      arl_text->box(FL_DOWN_BOX);
      arl_text->color((Fl_Color)FL_LIGHT3);
      arl_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
      arl_text->labeltype(FL_NORMAL_LABEL);
      arl_text->labelfont(0);
      arl_text->labelsize(14);
      arl_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      arl_text->align(FL_ALIGN_TOP_LEFT);
      arl_text->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(arl_text);
    } // FTextEdit* arl_text
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Round_Button *btn_dtformat0=(Fl_Round_Button *)0;

static void cb_btn_dtformat0(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 0;
btn_dtformat1->value(0);
btn_dtformat2->value(0);
};
}

Fl_Round_Button *btn_dtformat1=(Fl_Round_Button *)0;

static void cb_btn_dtformat1(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 1;
btn_dtformat0->value(0);
btn_dtformat2->value(0);
};
}

Fl_Round_Button *btn_dtformat2=(Fl_Round_Button *)0;

static void cb_btn_dtformat2(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.dtformat = 2;
btn_dtformat1->value(0);
btn_dtformat0->value(0);
};
}

Fl_Round_Button *btn_utc_format0=(Fl_Round_Button *)0;

static void cb_btn_utc_format0(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 0;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format1=(Fl_Round_Button *)0;

static void cb_btn_utc_format1(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 1;
btn_utc_format0->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format2=(Fl_Round_Button *)0;

static void cb_btn_utc_format2(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 2;
btn_utc_format1->value(0);
btn_utc_format0->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format3=(Fl_Round_Button *)0;

static void cb_btn_utc_format3(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 3;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format0->value(0);
btn_utc_format4->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format4=(Fl_Round_Button *)0;

static void cb_btn_utc_format4(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 4;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format0->value(0);
btn_utc_format5->value(0);
};
}

Fl_Round_Button *btn_utc_format5=(Fl_Round_Button *)0;

static void cb_btn_utc_format5(Fl_Round_Button* o, void*) {
  if (o->value()) {
progStatus.UTC = 5;
btn_utc_format1->value(0);
btn_utc_format2->value(0);
btn_utc_format3->value(0);
btn_utc_format4->value(0);
btn_utc_format0->value(0);
};
}

Fl_Button *btn_close_config=(Fl_Button *)0;

static void cb_btn_close_config(Fl_Button*, void*) {
  cb_close_config();
}

Fl_Input *txt_my_call=(Fl_Input *)0;

static void cb_txt_my_call(Fl_Input* o, void*) {
  progStatus.my_call = o->value();
}

Fl_Input *txt_my_tel=(Fl_Input *)0;

static void cb_txt_my_tel(Fl_Input* o, void*) {
  progStatus.my_tel = o->value();
}

Fl_Input *txt_my_name=(Fl_Input *)0;

static void cb_txt_my_name(Fl_Input* o, void*) {
  progStatus.my_name = o->value();
}

Fl_Input *txt_my_addr=(Fl_Input *)0;

static void cb_txt_my_addr(Fl_Input* o, void*) {
  progStatus.my_addr = o->value();
}

Fl_Input *txt_my_city=(Fl_Input *)0;

static void cb_txt_my_city(Fl_Input* o, void*) {
  progStatus.my_city = o->value();
}

Fl_Spinner *cnt_wpl=(Fl_Spinner *)0;

static void cb_cnt_wpl(Fl_Spinner* o, void*) {
  progStatus.wpl = (int)o->value();
}

Fl_Check_Button *btn_compress=(Fl_Check_Button *)0;

static void cb_btn_compress(Fl_Check_Button* o, void*) {
  progStatus.compression = o->value();
}

Fl_Double_Window* config_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(480, 270, _("flmsg configure"));
    w = o;
    { Fl_Group* o = new Fl_Group(5, 4, 173, 263, _("ICS format"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Group* o = new Fl_Group(13, 25, 155, 80, _("Date"));
        o->box(FL_THIN_DOWN_FRAME);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        { Fl_Round_Button* o = btn_dtformat0 = new Fl_Round_Button(22, 45, 70, 15, _("YYYY-DD-MM"));
          btn_dtformat0->down_box(FL_ROUND_DOWN_BOX);
          btn_dtformat0->callback((Fl_Callback*)cb_btn_dtformat0);
          if (progStatus.dtformat == 0) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_dtformat0
        { Fl_Round_Button* o = btn_dtformat1 = new Fl_Round_Button(22, 65, 70, 15, _("MM/DD/YY"));
          btn_dtformat1->down_box(FL_ROUND_DOWN_BOX);
          btn_dtformat1->callback((Fl_Callback*)cb_btn_dtformat1);
          if (progStatus.dtformat == 1) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_dtformat1
        { Fl_Round_Button* o = btn_dtformat2 = new Fl_Round_Button(22, 85, 70, 15, _("DD/MM/YY"));
          btn_dtformat2->down_box(FL_ROUND_DOWN_BOX);
          btn_dtformat2->callback((Fl_Callback*)cb_btn_dtformat2);
          if (progStatus.dtformat == 2) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_dtformat2
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(13, 108, 155, 150, _("Time"));
        o->box(FL_THIN_DOWN_FRAME);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        { Fl_Round_Button* o = btn_utc_format0 = new Fl_Round_Button(20, 128, 70, 15, _("hhmm"));
          btn_utc_format0->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format0->callback((Fl_Callback*)cb_btn_utc_format0);
          if (progStatus.UTC == 0) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format0
        { Fl_Round_Button* o = btn_utc_format1 = new Fl_Round_Button(20, 149, 70, 15, _("hh:mm"));
          btn_utc_format1->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format1->callback((Fl_Callback*)cb_btn_utc_format1);
          if (progStatus.UTC == 1) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format1
        { Fl_Round_Button* o = btn_utc_format2 = new Fl_Round_Button(20, 170, 70, 15, _("hhmmZ"));
          btn_utc_format2->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format2->callback((Fl_Callback*)cb_btn_utc_format2);
          if (progStatus.UTC == 2) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format2
        { Fl_Round_Button* o = btn_utc_format3 = new Fl_Round_Button(20, 192, 70, 15, _("hh:mmZ"));
          btn_utc_format3->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format3->callback((Fl_Callback*)cb_btn_utc_format3);
          if (progStatus.UTC == 3) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format3
        { Fl_Round_Button* o = btn_utc_format4 = new Fl_Round_Button(20, 213, 70, 15, _("hhmm UTC"));
          btn_utc_format4->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format4->callback((Fl_Callback*)cb_btn_utc_format4);
          if (progStatus.UTC == 4) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format4
        { Fl_Round_Button* o = btn_utc_format5 = new Fl_Round_Button(20, 235, 70, 15, _("hh:mm UTC"));
          btn_utc_format5->down_box(FL_ROUND_DOWN_BOX);
          btn_utc_format5->callback((Fl_Callback*)cb_btn_utc_format5);
          if (progStatus.UTC == 5) o->value(1); else o->value(0);
        } // Fl_Round_Button* btn_utc_format5
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { btn_close_config = new Fl_Button(400, 238, 73, 25, _("close"));
      btn_close_config->callback((Fl_Callback*)cb_btn_close_config);
    } // Fl_Button* btn_close_config
    { Fl_Group* o = new Fl_Group(178, 4, 300, 185, _("Radiogram format"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Input* o = txt_my_call = new Fl_Input(232, 29, 77, 24, _("Call:"));
        txt_my_call->callback((Fl_Callback*)cb_txt_my_call);
        o->value(progStatus.my_call.c_str());
      } // Fl_Input* txt_my_call
      { Fl_Input* o = txt_my_tel = new Fl_Input(341, 29, 130, 24, _("Tel:"));
        txt_my_tel->callback((Fl_Callback*)cb_txt_my_tel);
        o->value(progStatus.my_tel.c_str());
      } // Fl_Input* txt_my_tel
      { Fl_Input* o = txt_my_name = new Fl_Input(236, 61, 235, 24, _("Name:"));
        txt_my_name->callback((Fl_Callback*)cb_txt_my_name);
        o->value(progStatus.my_name.c_str());
      } // Fl_Input* txt_my_name
      { Fl_Input* o = txt_my_addr = new Fl_Input(236, 93, 235, 24, _("Addr:"));
        txt_my_addr->callback((Fl_Callback*)cb_txt_my_addr);
        o->value(progStatus.my_addr.c_str());
      } // Fl_Input* txt_my_addr
      { Fl_Input* o = txt_my_city = new Fl_Input(271, 125, 200, 24, _("City/St/Zip:"));
        txt_my_city->callback((Fl_Callback*)cb_txt_my_city);
        o->value(progStatus.my_city.c_str());
      } // Fl_Input* txt_my_city
      { Fl_Spinner* o = cnt_wpl = new Fl_Spinner(188, 157, 40, 24, _("message words/line"));
        cnt_wpl->tooltip(_("Radiogram message contents auto format"));
        cnt_wpl->minimum(4);
        cnt_wpl->maximum(10);
        cnt_wpl->value(5);
        cnt_wpl->callback((Fl_Callback*)cb_cnt_wpl);
        cnt_wpl->align(FL_ALIGN_RIGHT);
        o->value(progStatus.wpl);
      } // Fl_Spinner* cnt_wpl
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(178, 191, 300, 40, _("Wrap"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Check_Button* o = btn_compress = new Fl_Check_Button(295, 206, 70, 15, _("Use compression"));
        btn_compress->tooltip(_("Compress wrap files"));
        btn_compress->down_box(FL_DOWN_BOX);
        btn_compress->callback((Fl_Callback*)cb_btn_compress);
        o->value(progStatus.compression);
      } // Fl_Check_Button* btn_compress
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Choice *sel_hx_select=(Fl_Choice *)0;

static void cb_sel_hx_select(Fl_Choice*, void*) {
  cb_hx_select();
}

Fl_Button *btn_hx_select_add=(Fl_Button *)0;

static void cb_btn_hx_select_add(Fl_Button*, void*) {
  cb_hx_select_add();
}

Fl_Input2 *txt_hx_select_text=(Fl_Input2 *)0;

Fl_Button *btn_hx_select_cancel=(Fl_Button *)0;

static void cb_btn_hx_select_cancel(Fl_Button*, void*) {
  cb_hx_select_cancel();
}

Fl_Return_Button *btn_hx_select_ok=(Fl_Return_Button *)0;

static void cb_btn_hx_select_ok(Fl_Return_Button*, void*) {
  cb_hx_select_ok();
}

Fl_Output *txt_hx_instructions=(Fl_Output *)0;

Fl_Double_Window* hx_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(359, 121, _("Optional Handling"));
    w = o;
    { sel_hx_select = new Fl_Choice(3, 20, 68, 24, _("HX__:"));
      sel_hx_select->down_box(FL_BORDER_BOX);
      sel_hx_select->callback((Fl_Callback*)cb_sel_hx_select);
      sel_hx_select->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Choice* sel_hx_select
    { btn_hx_select_add = new Fl_Button(73, 20, 30, 24, _("=>"));
      btn_hx_select_add->callback((Fl_Callback*)cb_btn_hx_select_add);
    } // Fl_Button* btn_hx_select_add
    { txt_hx_select_text = new Fl_Input2(105, 20, 121, 24, _("HX text"));
      txt_hx_select_text->box(FL_DOWN_BOX);
      txt_hx_select_text->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_hx_select_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_hx_select_text->labeltype(FL_NORMAL_LABEL);
      txt_hx_select_text->labelfont(0);
      txt_hx_select_text->labelsize(14);
      txt_hx_select_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_hx_select_text->align(FL_ALIGN_TOP_LEFT);
      txt_hx_select_text->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_hx_select_text
    { btn_hx_select_cancel = new Fl_Button(229, 20, 60, 24, _("Cancel"));
      btn_hx_select_cancel->callback((Fl_Callback*)cb_btn_hx_select_cancel);
    } // Fl_Button* btn_hx_select_cancel
    { btn_hx_select_ok = new Fl_Return_Button(293, 20, 60, 24, _("OK"));
      btn_hx_select_ok->callback((Fl_Callback*)cb_btn_hx_select_ok);
    } // Fl_Return_Button* btn_hx_select_ok
    { txt_hx_instructions = new Fl_Output(5, 47, 348, 70);
      txt_hx_instructions->type(12);
      txt_hx_instructions->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Output* txt_hx_instructions
    o->end();
  } // Fl_Double_Window* o
  return w;
}
